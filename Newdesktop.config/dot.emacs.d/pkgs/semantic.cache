;; Object pkgs/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "pkgs/"
  :tables (list 
   (semanticdb-table "tabbar.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("tabbar-version" variable (:constant-flag t :default-value "1.3") nil [303 334]) ("defgroup" code nil nil [6930 7015]) ("tabbar-cycling-scope" variable (:user-visible-flag t) nil [7017 7549]) ("tabbar-inhibit-functions" variable (:default-value (quote (tabbar-default-inhibit-function))) nil [7551 7864]) ("tabbar-current-tabset-function" variable (:default-value (quote tabbar-buffer-tabs)) nil [7866 8079]) ("tabbar-tab-label-function" variable (:default-value (quote tabbar-buffer-tab-label)) nil [8081 8301]) ("tabbar-select-tab-function" variable (:default-value (quote tabbar-buffer-select-tab)) nil [8303 8521]) ("tabbar-help-on-tab-function" variable (:default-value (quote tabbar-buffer-help-on-tab)) nil [8523 8819]) ("tabbar-home-function" variable (:default-value (quote tabbar-buffer-toggle-group-mode)) nil [8821 9034]) ("tabbar-home-help-function" variable (:default-value (quote tabbar-buffer-toggle-group-mode-help)) nil [9036 9320]) ("tabbar-scroll-left-function" variable (:default-value (quote tabbar-scroll-left)) nil [9322 9586]) ("tabbar-scroll-left-help-function" variable (:default-value (quote tabbar-scroll-left-help)) nil [9588 9865]) ("tabbar-scroll-right-function" variable (:default-value (quote tabbar-scroll-right)) nil [9867 10135]) ("tabbar-scroll-right-help-function" variable (:default-value (quote tabbar-scroll-right-help)) nil [10137 10417]) ("tabbar-tabsets-tabset-name" variable (:constant-flag t :default-value "tabbar-tabsets-tabset") nil [10443 10558]) ("tabbar-make-tab" function (:arguments ("object" "tabset")) nil [10560 10707]) ("tabbar-tab-value" function (:arguments ("tab")) nil [10709 10787]) ("tabbar-tab-tabset" function (:arguments ("tab")) nil [10789 10874]) ("tabbar-tabsets" variable nil nil [10876 10927]) ("tabbar-current-tabset" variable nil nil [10929 11015]) ("make-variable-buffer-local" code nil nil [11016 11067]) ("tabbar-last-selected-tab" variable nil nil [11069 11133]) ("tabbar-free-tabsets-store" function nil nil [11135 11301]) ("tabbar-init-tabsets-store" function nil nil [11303 11449]) ("tabbar-map-tabsets" function (:arguments ("function")) nil [11451 11907]) ("tabbar-make-tabset" function (:arguments ("name" "&rest" "objects")) nil [11909 12349]) ("tabbar-get-tabset" function (:arguments ("name")) nil [12351 12501]) ("tabbar-delete-tabset" function (:arguments ("tabset")) nil [12503 12653]) ("tabbar-tabs" function (:arguments ("tabset")) nil [12655 12749]) ("tabbar-tab-values" function (:arguments ("tabset")) nil [12751 12883]) ("tabbar-get-tab" function (:arguments ("object" "tabset")) nil [12885 13057]) ("tabbar-member" function (:arguments ("tab" "tabset")) nil [13059 13217]) ("tabbar-template" function (:arguments ("tabset")) nil [13219 13341]) ("tabbar-set-template" function (:arguments ("tabset" "template")) nil [13343 13480]) ("tabbar-selected-tab" function (:arguments ("tabset")) nil [13482 13583]) ("tabbar-selected-value" function (:arguments ("tabset")) nil [13585 13728]) ("tabbar-selected-p" function (:arguments ("tab" "tabset")) nil [13730 13868]) ("tabbar-select-tab" function (:arguments ("tab" "tabset")) nil [13870 14178]) ("tabbar-select-tab-value" function (:arguments ("object" "tabset")) nil [14180 14475]) ("tabbar-start" function (:arguments ("tabset")) nil [14477 14591]) ("tabbar-view" function (:arguments ("tabset")) nil [14593 14728]) ("tabbar-add-tab" function (:arguments ("tabset" "object" "&optional" "append")) nil [14730 15314]) ("tabbar-delete-tab" function (:arguments ("tab")) nil [15316 15684]) ("tabbar-scroll" function (:arguments ("tabset" "count")) nil [15686 16091]) ("tabbar-tab-next" function (:arguments ("tabset" "tab" "&optional" "before")) nil [16093 16497]) ("tabbar-current-tabset" function (:arguments ("&optional" "update")) nil [16499 17072]) ("tabbar-get-tabsets-tabset" function nil nil [17074 17642]) ("tabbar-find-image" function (:arguments ("specs")) nil [17675 17938]) ("tabbar-separator-widget" variable (:constant-flag t :default-value (quote (cons (string) (repeat :tag "Image" :extra-offset 2 (restricted-sexp :tag "Spec" :match-alternatives (listp)))))) nil [17940 18431]) ("tabbar-setup-separator" function (:arguments ("variable" "value")) nil [18433 18958]) ("tabbar-separator-value" variable nil nil [18960 19040]) ("tabbar-separator" variable (:default-value (list " ")) nil [19042 19250]) ("tabbar-button-widget" variable (:constant-flag t :default-value (quote (cons (cons :tag "Enabled" (string) (repeat :tag "Image" :extra-offset 2 (restricted-sexp :tag "Spec" :match-alternatives (listp)))) (cons :tag "Disabled" (string) (repeat :tag "Image" :extra-offset 2 (restricted-sexp :tag "Spec" :match-alternatives (listp))))))) nil [19252 20151]) ("tabbar-setup-button" function (:arguments ("variable" "value")) nil [20153 21460]) ("tabbar-make-button-keymap" function (:arguments ("callback")) nil [21462 22068]) ("tabbar-home-button-enabled" variable nil nil [22070 22146]) ("tabbar-home-button-disabled" variable nil nil [22148 22226]) ("tabbar-home-button-keymap" variable (:constant-flag t :default-value (tabbar-make-button-keymap (quote tabbar-home-button-callback))) nil [22228 22354]) ("tabbar-home-button-callback" function (:user-visible-flag t :arguments ("event")) nil [22356 22705]) ("tabbar-home-button-help" function (:arguments ("window" "object" "position")) nil [22707 22988]) ("tabbar-home-button-enabled-image" variable (:constant-flag t :default-value (quote ((:type pbm :ascent center :data "P2
10 10
255
184 184 184 184 0 184 184 184 184 184 184 184 184 0 0 0 184 184 184 184
184 184 0 0 0 0 0 184 184 184 184 0 0 0 0 0 0 0 184 184 184 184 255 0 0
0 255 255 255 184 184 0 0 0 0 0 0 0 184 184 184 184 0 0 0 0 0 255 255 184
184 184 184 0 0 0 255 255 184 184 184 184 184 184 0 255 255 184 184 184
184 184 184 184 184 255 184 184 184 184
")))) nil [22990 23466]) ("tabbar-home-button-disabled-image" variable (:constant-flag t :default-value (quote ((:type pbm :ascent center :data "P2
10 10
255
184 184 184 184 120 184 184 184 184 184 184 184 184 120 120 120 184 184
184 184 184 184 120 184 184 184 120 184 184 184 184 120 120 160 184 160
120 120 184 184 184 184 255 120 184 120 255 255 255 184 184 120 120 160
184 160 120 120 184 184 184 184 120 184 184 184 120 255 255 184 184 184
184 120 120 120 255 255 184 184 184 184 184 184 120 255 255 184 184 184
184 184 184 184 184 255 184 184 184 184
")))) nil [23468 24016]) ("tabbar-home-button" variable (:default-value (cons (cons "[o]" tabbar-home-button-enabled-image) (cons "[x]" tabbar-home-button-disabled-image))) nil [24018 24306]) ("tabbar-scroll-left-button-enabled" variable nil nil [24308 24398]) ("tabbar-scroll-left-button-disabled" variable nil nil [24400 24492]) ("tabbar-scroll-left-button-keymap" variable (:constant-flag t :default-value (tabbar-make-button-keymap (quote tabbar-scroll-left-button-callback))) nil [24494 24641]) ("tabbar-scroll-left-button-callback" function (:user-visible-flag t :arguments ("event")) nil [24643 25027]) ("tabbar-scroll-left-button-help" function (:arguments ("window" "object" "position")) nil [25029 25345]) ("tabbar-scroll-left-button-enabled-image" variable (:constant-flag t :default-value (quote ((:type pbm :ascent center :data "P2
8 10
255
184 184 184 184 184 184 184 184 184 184 184 184 184 0 184 184 184 184 184
184 0 0 255 184 184 184 184 0 0 0 255 184 184 184 0 0 0 0 255 184 184 184
184 0 0 0 255 184 184 184 184 184 0 0 255 184 184 184 184 184 184 0 255
184 184 184 184 184 184 184 255 184 184 184 184 184 184 184 184 184
")))) nil [25347 25794]) ("tabbar-scroll-left-button-disabled-image" variable (:constant-flag t :default-value (quote ((:type pbm :ascent center :data "P2
8 10
255
184 184 184 184 184 184 184 184 184 184 184 184 184 120 184 184 184 184
184 184 120 120 255 184 184 184 184 120 184 120 255 184 184 184 120 184
184 120 255 184 184 184 184 120 184 120 255 184 184 184 184 184 120 120
255 184 184 184 184 184 184 120 255 184 184 184 184 184 184 184 255 184
184 184 184 184 184 184 184 184
")))) nil [25796 26277]) ("tabbar-scroll-left-button" variable (:default-value (cons (cons " <" tabbar-scroll-left-button-enabled-image) (cons " =" tabbar-scroll-left-button-disabled-image))) nil [26279 26593]) ("tabbar-scroll-right-button-enabled" variable nil nil [26595 26687]) ("tabbar-scroll-right-button-disabled" variable nil nil [26689 26783]) ("tabbar-scroll-right-button-keymap" variable (:constant-flag t :default-value (tabbar-make-button-keymap (quote tabbar-scroll-right-button-callback))) nil [26785 26935]) ("tabbar-scroll-right-button-callback" function (:user-visible-flag t :arguments ("event")) nil [26937 27326]) ("tabbar-scroll-right-button-help" function (:arguments ("window" "object" "position")) nil [27328 27649]) ("tabbar-scroll-right-button-enabled-image" variable (:constant-flag t :default-value (quote ((:type pbm :ascent center :data "P2
8 10
255
184 184 184 184 184 184 184 184 184 0 184 184 184 184 184 184 184 0 0 184
184 184 184 184 184 0 0 0 184 184 184 184 184 0 0 0 0 184 184 184 184 0
0 0 255 255 184 184 184 0 0 255 255 184 184 184 184 0 255 255 184 184 184
184 184 184 255 184 184 184 184 184 184 184 184 184 184 184 184 184
")))) nil [27651 28100]) ("tabbar-scroll-right-button-disabled-image" variable (:constant-flag t :default-value (quote ((:type pbm :ascent center :data "P2
8 10
255
184 184 184 184 184 184 184 184 184 120 184 184 184 184 184 184 184 120
120 184 184 184 184 184 184 120 184 120 184 184 184 184 184 120 184 184
120 184 184 184 184 120 184 120 255 255 184 184 184 120 120 255 255 184
184 184 184 120 255 255 184 184 184 184 184 184 255 184 184 184 184 184
184 184 184 184 184 184 184 184
")))) nil [28102 28585]) ("tabbar-scroll-right-button" variable (:default-value (cons (cons " >" tabbar-scroll-right-button-enabled-image) (cons " =" tabbar-scroll-right-button-disabled-image))) nil [28587 28905]) ("tabbar-default-face" variable (:default-value (quote ((t (:inherit variable-pitch :height 0.8 :foreground "gray60" :background "gray72"))))) nil [28921 29176]) ("tabbar-unselected-face" variable (:default-value (quote ((t (:inherit tabbar-default-face :box (:line-width 2 :color "white" :style pressed-button)))))) nil [29178 29411]) ("tabbar-selected-face" variable (:default-value (quote ((t (:inherit tabbar-default-face :box (:line-width 2 :color "white" :style released-button) :foreground "blue"))))) nil [29413 29681]) ("tabbar-separator-face" variable (:default-value (quote ((t (:inherit tabbar-default-face :height 0.2))))) nil [29683 29877]) ("tabbar-button-face" variable (:default-value (quote ((t (:inherit tabbar-default-face :box (:line-width 2 :color "white" :style released-button) :foreground "dark red"))))) nil [29879 30155]) ("tabbar-scroll-left" function (:arguments ("event")) nil [30174 30360]) ("tabbar-scroll-left-help" function nil nil [30362 30503]) ("tabbar-scroll-right" function (:arguments ("event")) nil [30505 30692]) ("tabbar-scroll-right-help" function nil nil [30694 30838]) ("tabbar-make-select-tab-command" function (:arguments ("tab")) nil [30918 31461]) ("tabbar-make-help-on-tab-function" function (:arguments ("tab")) nil [31465 31913]) ("tabbar-line-element" function (:arguments ("tab")) nil [31920 33158]) ("tabbar-line" function nil nil [33160 34803]) ("tabbar-make-mouse-event" function (:arguments ("&optional" "type")) nil [34844 35218]) ("tabbar-click-on-tab" function (:arguments ("tab" "&optional" "type")) nil [35220 35498]) ("tabbar-cycle" function (:arguments ("&optional" "backward")) nil [35500 37597]) ("tabbar-backward" function (:user-visible-flag t) nil [37614 37774]) ("tabbar-forward" function (:user-visible-flag t) nil [37791 37944]) ("tabbar-backward-group" function (:user-visible-flag t) nil [37961 38127]) ("tabbar-forward-group" function (:user-visible-flag t) nil [38144 38303]) ("tabbar-backward-tab" function (:user-visible-flag t) nil [38320 38463]) ("tabbar-forward-tab" function (:user-visible-flag t) nil [38480 38616]) ("tabbar-old-global-hlf" variable nil nil [38638 38736]) ("tabbar-header-line-format" variable (:constant-flag t :default-value (quote (:eval (tabbar-line)))) nil [38738 38833]) ("define-minor-mode" code nil nil [38850 39968]) ("tabbar-old-local-hlf" variable nil nil [39970 40072]) ("make-variable-buffer-local" code nil nil [40073 40123]) ("define-minor-mode" code nil nil [40140 41105]) ("tabbar-default-inhibit-function" function nil nil [41121 41391]) ("tabbar-buffer-kill-buffer-hook" function nil nil [41393 42402]) ("tabbar-buffer-list-function" variable (:user-visible-flag t :default-value (quote tabbar-buffer-list)) nil [42424 42661]) ("tabbar-buffer-groups-function" variable (:user-visible-flag t :default-value (quote tabbar-buffer-groups)) nil [42663 42993]) ("tabbar-buffer-list" function nil nil [42995 43391]) ("tabbar-buffer-groups" function (:arguments ("buffer")) nil [43393 44474]) ("tabbar-buffer-cleanup-tabsets" function (:arguments ("buffers")) nil [44510 45134]) ("tabbar-buffer-update-groups" function nil nil [45136 46042]) ("tabbar-buffer-group-mode" variable nil nil [46070 46160]) ("make-variable-buffer-local" code nil nil [46161 46215]) ("tabbar-buffer-tabs" function nil nil [46217 46986]) ("tabbar-buffer-tab-label" function (:arguments ("tab")) nil [46988 47238]) ("tabbar-buffer-help-on-tab" function (:arguments ("tab")) nil [47240 47515]) ("tabbar-buffer-select-tab" function (:arguments ("event" "tab")) nil [47517 47960]) ("tabbar-buffer-toggle-group-mode" function (:arguments ("event")) nil [47962 48186]) ("tabbar-buffer-toggle-group-mode-help" function nil nil [48188 48429]) ("tabbar" package nil nil [48431 48448]))
    :file "tabbar.el"
    :pointmax 48474
    )
   (semanticdb-table "psvn.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("easymenu" include nil nil [10415 10434]) ("dired" include nil nil [10455 10471]) ("ediff-util" include nil nil [10492 10513]) ("ediff-wind" include nil nil [10534 10555]) ("elp" include nil nil [10576 10590]) ("pp" include nil nil [10611 10624]) ("condition-case" code nil nil [10627 10700]) ("svn-psvn-revision" variable (:constant-flag t :default-value "$Id: psvn.el 33557 2008-10-08 20:01:12Z xsteve $") nil [10702 10814]) ("svn-status-verbose" variable (:user-visible-flag t :default-value t) nil [10843 11006]) ("svn-log-edit-file-name" variable (:user-visible-flag t :default-value "++svn-log++") nil [11007 11223]) ("put" code nil nil [11224 11277]) ("svn-log-edit-insert-files-to-commit" variable (:user-visible-flag t :default-value t) nil [11278 11418]) ("svn-log-edit-show-diff-for-commit" variable (:user-visible-flag t) nil [11419 11570]) ("svn-log-edit-use-log-edit-mode" variable (:user-visible-flag t :default-value (and (condition-case nil (require (quote log-edit)) (error nil)) t)) nil [11571 11823]) ("svn-log-edit-paragraph-start" variable (:user-visible-flag t :default-value "$\\|[ 	]*$\\|##.*$\\|\\*.*:.*$\\|[ 	]+(.+):.*$") nil [11824 12024]) ("svn-log-edit-paragraph-separate" variable (:user-visible-flag t :default-value "$\\|##.*$") nil [12025 12190]) ("svn-status-hide-unknown" variable (:user-visible-flag t) nil [12191 12383]) ("svn-status-hide-unmodified" variable (:user-visible-flag t) nil [12384 12585]) ("svn-status-sort-status-buffer" variable (:user-visible-flag t :default-value t) nil [12586 12894]) ("svn-status-ediff-delete-temporary-files" variable (:user-visible-flag t) nil [12896 13126]) ("svn-status-changelog-style" variable (:user-visible-flag t :default-value (quote changelog)) nil [13128 13547]) ("svn-status-unmark-files-after-list" variable (:user-visible-flag t :default-value (quote (commit revert))) nil [13549 13791]) ("svn-status-preserve-window-configuration" variable (:user-visible-flag t :default-value t) nil [13793 13926]) ("svn-status-auto-revert-buffers" variable (:user-visible-flag t :default-value t) nil [13928 14056]) ("svn-status-fancy-file-state-in-modeline" variable (:user-visible-flag t :default-value t) nil [14058 14227]) ("svn-status-negate-meaning-of-arg-commands" variable (:user-visible-flag t :default-value (quote nil)) nil [14229 14553]) ("svn-status-svn-executable" variable (:user-visible-flag t :default-value "svn") nil [14555 14794]) ("put" code nil nil [14795 14851]) ("svn-status-default-export-directory" variable (:user-visible-flag t :default-value "~/") nil [14853 14989]) ("svn-status-svn-environment-var-list" variable (:user-visible-flag t :default-value (quote ("LC_MESSAGES=C" "LC_ALL="))) nil [14991 15564]) ("put" code nil nil [15565 15631]) ("svn-browse-url-function" variable nil nil [15633 17378]) ("svn-status-window-alist" variable (:default-value (quote ((diff "*svn-diff*") (log "*svn-log*") (info t) (blame t) (proplist t) (update t)))) nil [17479 18463]) ("svn-status-short-mod-flag-p" variable (:user-visible-flag t :default-value t) nil [18465 19127]) ("svn-status-debug-level" variable nil nil [19129 19332]) ("svn-bookmark-list" variable nil nil [19334 19435]) ("svn-status-buffer-name" variable (:default-value "*svn-status*") nil [19547 19626]) ("svn-process-buffer-name" variable (:default-value " *svn-process*") nil [19627 19710]) ("svn-log-edit-buffer-name" variable (:default-value "*svn-log-edit*") nil [19711 19796]) ("svn-status-use-header-line" variable (:user-visible-flag t :default-value (if (boundp (quote header-line-format)) t (quote inline))) nil [19798 20295]) ("svn-status-default-log-arguments" variable (:user-visible-flag t :default-value (quote ("-v"))) nil [20417 20626]) ("put" code nil nil [20627 20690]) ("svn-status-default-commit-arguments" variable (:user-visible-flag t :default-value (quote nil)) nil [20692 21137]) ("put" code nil nil [21138 21204]) ("svn-status-default-diff-arguments" variable (:user-visible-flag t :default-value (quote ("-x" "--ignore-eol-style"))) nil [21206 21823]) ("put" code nil nil [21824 21888]) ("svn-status-default-status-arguments" variable (:user-visible-flag t :default-value (quote nil)) nil [21890 22106]) ("put" code nil nil [22107 22173]) ("svn-status-default-blame-arguments" variable (:user-visible-flag t :default-value (quote ("-x" "--ignore-eol-style"))) nil [22175 22415]) ("put" code nil nil [22417 22482]) ("svn-trac-project-root" variable nil nil [22484 22631]) ("svn-status-module-name" variable (:user-visible-flag t) nil [22633 22763]) ("svn-status-branch-list" variable (:user-visible-flag t) nil [22765 23226]) ("svn-status-load-state-before-svn-status" variable (:user-visible-flag t :default-value t) nil [23228 23372]) ("svn-log-link-handlers" variable nil nil [23374 23531]) ("svn-status-mode-hook" variable nil nil [23543 23620]) ("svn-log-edit-mode-hook" variable nil nil [23621 23702]) ("svn-log-edit-done-hook" variable nil nil [23703 23780]) ("svn-post-process-svn-output-hook" variable nil nil [23933 24108]) ("when" code nil nil [24110 24221]) ("svn-status-svn-process-coding-system" variable (:default-value (when (boundp (quote locale-coding-system)) locale-coding-system)) nil [24223 24436]) ("svn-status-svn-file-coding-system" variable (:default-value (quote undecided-unix)) nil [24438 24731]) ("svn-status-use-ido-completion" variable (:user-visible-flag t :default-value (fboundp (quote ido-completing-read))) nil [24733 24878]) ("svn-status-completing-read-function" variable (:default-value (if svn-status-use-ido-completion (quote ido-completing-read) (quote completing-read))) nil [24880 24999]) ("svn-status-track-user-input" variable nil nil [25027 25179]) ("svn-status-refresh-info" variable nil nil [25181 25291]) ("defgroup" code nil nil [25313 25384]) ("defgroup" code nil nil [25386 25442]) ("cl" include nil nil [25465 25478]) ("svn-xemacsp" variable (:constant-flag t :default-value (featurep (quote xemacs))) nil [25481 25522]) ("if" code nil nil [25525 25595]) ("svn-status-display-full-path" variable nil nil [25598 25802]) ("svn-status-prefix-key" variable (:default-value [(control x) (meta s)]) nil [25804 26362]) ("svn-admin-default-create-directory" variable (:user-visible-flag t :default-value "~/") nil [26364 26515]) ("svn-status-custom-hide-function" variable nil nil [26517 26678]) ("add-to-list" code nil nil [26860 26939]) ("svn-status-directory-history" variable nil nil [26964 27048]) ("svn-process-cmd" variable nil nil [27049 27077]) ("svn-status-info" variable nil nil [27078 27106]) ("svn-status-filename-to-buffer-position-cache" variable (:default-value (make-hash-table :test (quote equal) :weakness t)) nil [27107 27203]) ("svn-status-base-info" variable nil nil [27204 27284]) ("svn-status-initial-window-configuration" variable nil nil [27285 27337]) ("svn-status-default-column" variable (:default-value 23) nil [27338 27375]) ("svn-status-default-revision-width" variable (:default-value 4) nil [27376 27420]) ("svn-status-default-author-width" variable (:default-value 9) nil [27421 27463]) ("svn-status-line-format" variable (:default-value " %c%c%c %4s %4s %-9s") nil [27464 27518]) ("svn-start-of-file-list-line-number" variable nil nil [27519 27564]) ("svn-status-files-to-commit" variable nil nil [27565 27720]) ("svn-status-recursive-commit" variable nil nil [27721 27876]) ("svn-log-edit-update-log-entry" variable nil nil [27877 28022]) ("svn-status-pre-commit-window-configuration" variable nil nil [28023 28078]) ("svn-status-pre-propedit-window-configuration" variable nil nil [28079 28136]) ("svn-status-head-revision" variable nil nil [28137 28174]) ("svn-status-root-return-info" variable nil nil [28175 28215]) ("svn-status-property-edit-must-match-flag" variable nil nil [28216 28269]) ("svn-status-propedit-property-name" variable nil nil [28270 28371]) ("svn-status-propedit-file-list" variable nil nil [28372 28414]) ("svn-status-mode-line-process" variable nil nil [28415 28455]) ("svn-status-mode-line-process-status" variable nil nil [28456 28503]) ("svn-status-mode-line-process-edit-flag" variable nil nil [28504 28554]) ("svn-status-edit-svn-command" variable nil nil [28555 28595]) ("svn-status-update-previous-process-output" variable nil nil [28596 28650]) ("svn-pre-run-asynch-recent-keys" variable nil nil [28651 28694]) ("svn-pre-run-mode-line-process" variable nil nil [28695 28737]) ("svn-status-temp-dir" variable (:default-value (expand-file-name (or (when (boundp (quote temporary-file-directory)) temporary-file-directory) (when (fboundp (quote temp-directory)) (file-name-as-directory (temp-directory))) "/tmp/"))) nil [28738 29172]) ("svn-temp-suffix" variable (:default-value (make-temp-name ".")) nil [29318 29363]) ("put" code nil nil [29364 29410]) ("svn-status-temp-file-to-remove" variable nil nil [29411 29454]) ("put" code nil nil [29455 29516]) ("svn-status-temp-arg-file" variable (:default-value (concat svn-status-temp-dir "svn.arg" svn-temp-suffix)) nil [29517 29605]) ("put" code nil nil [29606 29661]) ("svn-status-options" variable nil nil [29662 29693]) ("svn-status-remote" variable nil nil [29694 29720]) ("svn-status-commit-rev-number" variable nil nil [29721 29762]) ("svn-status-update-rev-number" variable nil nil [29763 29804]) ("svn-status-operated-on-dot" variable nil nil [29805 29844]) ("svn-status-last-commit-author" variable nil nil [29845 29887]) ("svn-status-elided-list" variable nil nil [29888 29923]) ("svn-status-last-output-buffer-name" variable nil nil [29924 30061]) ("svn-status-pre-run-svn-buffer" variable nil nil [30062 30104]) ("svn-status-update-list" variable nil nil [30105 30140]) ("svn-transient-buffers" variable nil nil [30141 30171]) ("svn-ediff-windows" variable nil nil [30172 30198]) ("svn-ediff-result" variable nil nil [30199 30224]) ("svn-status-last-diff-options" variable nil nil [30225 30266]) ("svn-status-blame-file-name" variable nil nil [30267 30306]) ("svn-status-blame-revision" variable nil nil [30307 30345]) ("svn-admin-last-repository-dir" variable nil nil [30346 30438]) ("svn-last-cmd-ring" variable (:default-value (make-ring 30)) nil [30439 30554]) ("svn-status-cached-version-string" variable nil nil [30555 30600]) ("svn-client-version" variable nil nil [30601 30676]) ("svn-status-get-line-information-for-file" variable nil nil [30677 30730]) ("svn-status-base-dir-cache" variable (:default-value (make-hash-table :test (quote equal) :weakness nil)) nil [30731 30810]) ("svn-status-usermark-storage" variable (:default-value (make-hash-table :test (quote equal) :weakness nil)) nil [30811 30892]) ("svn-log-registered-link-handlers" variable (:default-value (make-hash-table :test (quote eql) :weakness nil)) nil [30893 30977]) ("svn-status-partner-buffer" variable nil nil [30979 31066]) ("make-variable-buffer-local" code nil nil [31067 31122]) ("ediff-buffer-A" variable nil nil [31331 31354]) ("ediff-buffer-B" variable nil nil [31355 31378]) ("ediff-buffer-C" variable nil nil [31379 31402]) ("ediff-quit-hook" variable nil nil [31403 31427]) ("log-edit-initial-files" variable nil nil [31455 31486]) ("log-edit-callback" variable nil nil [31487 31513]) ("log-edit-listfun" variable nil nil [31514 31539]) ("ediff-after-quit-destination-buffer" variable nil nil [31739 31783]) ("svn-status-marked-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "green" :weight light)) (((class color) (background light)) (:foreground "green3")) (((class color) (background dark)) (:foreground "palegreen2")) (t (:weight bold))))) nil [32360 32713]) ("svn-status-marked-popup-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "green" :weight light)) (((class color) (background light)) (:foreground "green3")) (((class color) (background dark)) (:foreground "palegreen2")) (t (:weight bold))))) nil [32715 33067]) ("svn-status-update-available-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "magenta" :weight light)) (((class color) (background light)) (:foreground "magenta")) (((class color) (background dark)) (:foreground "yellow")) (t (:weight bold))))) nil [33069 33542]) ("svn-status-directory-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "lightblue" :weight light)) (((class color) (background light)) (:foreground "blue4")) (((class color) (background dark)) (:foreground "lightskyblue1")) (t (:weight bold))))) nil [33572 33981]) ("svn-status-filename-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "chocolate")) (((class color) (background dark)) (:foreground "beige"))))) nil [34016 34328]) ("svn-status-symlink-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "cornflower blue")) (((class color) (background dark)) (:foreground "cyan"))))) nil [34376 34777]) ("svn-status-locked-face" variable (:default-value (quote ((t (:weight bold :foreground "Red"))))) nil [34812 34985]) ("svn-status-switched-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "CadetBlue")) (((class color) (background dark)) (:foreground "Aquamarine")) (t (:bold t :italic t))))) nil [35027 35350]) ("if" code nil nil [35352 35916]) ("if" code nil nil [35918 36550]) ("svn-status-blame-rev-number-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "DarkGoldenrod")) (((class color) (background dark)) (:foreground "LightGoldenrod")) (t (:weight bold :slant italic))))) nil [36552 36857]) ("svn-highlight" variable (:default-value t) nil [36859 36883]) ("svn-add-face" function (:arguments ("str" "face" "&optional" "keymap")) nil [36907 37612]) ("svn-status-maybe-add-face" function (:arguments ("condition" "text" "face")) nil [37614 37794]) ("svn-status-choose-face-to-add" function (:arguments ("condition" "text" "face1" "face2")) nil [37796 38006]) ("svn-status-maybe-add-string" function (:arguments ("condition" "string" "face")) nil [38008 38205]) ("defalias" code nil nil [38236 38328]) ("defalias" code nil nil [38329 38427]) ("defalias" code nil nil [38428 38538]) ("if" code nil nil [38561 38615]) ("defalias" code nil nil [38617 38685]) ("if" code nil nil [38699 39166]) ("svn-substring-no-properties" function (:arguments ("string" "&optional" "from" "to")) nil [39168 39350]) ("if" code nil nil [39568 39822]) ("if" code nil nil [40288 41603]) ("svn-call-process-function" variable (:default-value (if (fboundp (quote process-file)) (quote process-file) (quote call-process))) nil [41633 41724]) ("svn-start-process-function" variable (:default-value (if (fboundp (quote start-file-process)) (quote start-file-process) (quote start-process))) nil [41725 41830]) ("svn-global-keymap" variable nil nil [41846 41973]) ("put" code nil nil [41974 42022]) ("when" code nil nil [42023 43127]) ("svn-status-diff-mode-map" variable nil nil [43129 43266]) ("put" code nil nil [43267 43322]) ("when" code nil nil [43340 43756]) ("svn-global-trac-map" variable nil nil [43758 43864]) ("put" code nil nil [43865 43915]) ("when" code nil nil [43932 44564]) ("defalias" code nil nil [44898 44945]) ("put" code nil nil [45014 45138]) ("svn-wc-adm-dir-name" function nil nil [45188 45391]) ("svn-log-edit-file-name" function (:arguments ("&optional" "curdir")) nil [45393 45715]) ("svn-status-message" function (:arguments ("level" "&rest" "args")) nil [45717 46103]) ("svn-status-flatten-list" function (:arguments ("list")) nil [46105 46322]) ("svn-status-window-line-position" function (:arguments ("w")) nil [46324 46575]) ("svn-checkout" function (:user-visible-flag t :arguments ("repos-url" "path")) nil [46592 46880]) ("defalias" code nil nil [46933 46968]) ("svn-status" function (:user-visible-flag t :arguments ("dir" "&optional" "arg")) nil [46985 48413]) ("svn-status-display-new-status-buffer" variable nil nil [48415 48464]) ("svn-status-1" function (:arguments ("dir" "&optional" "arg")) nil [48465 50274]) ("svn-status-this-directory" function (:user-visible-flag t :arguments ("arg")) nil [50276 50421]) ("svn-status-use-history" function (:user-visible-flag t) nil [50423 51325]) ("svn-had-user-input-since-asynch-run" function nil nil [51327 51434]) ("svn-process-environment" function nil nil [51436 52321]) ("svn-run" function (:arguments ("run-asynchron" "clear-process-buffer" "cmdtype" "&rest" "arglist")) nil [52323 57324]) ("svn-process-sentinel-fixup-path-seperators" function nil nil [57326 57650]) ("svn-process-sentinel" function (:arguments ("process" "event")) nil [57652 65252]) ("svn-process-handle-error-msg" variable nil nil [65254 65295]) ("svn-process-handle-error" function (:arguments ("error-msg")) nil [65296 65447]) ("svn-process-help-with-error-msg" function nil nil [65449 66055]) ("svn-process-filter" function (:arguments ("process" "str")) nil [66058 67127]) ("svn-revert-some-buffers" function (:user-visible-flag t :arguments ("&optional" "tree")) nil [67129 68362]) ("svn-parse-rev-num" function (:arguments ("str")) nil [68364 68520]) ("svn-status-make-ui-status" function nil nil [68522 69580]) ("svn-status-make-dummy-dirs" function (:arguments ("dir-list" "old-ui-information")) nil [69582 70519]) ("svn-status-make-line-info" function (:arguments ("&optional" "path" "ui" "file-mark" "prop-mark" "local-rev" "last-change-rev" "author" "update-mark" "locked-mark" "with-history-mark" "switched-mark" "locked-repo-mark" "psvn-extra-info")) nil [70521 71646]) ("svn-user-names-including-blanks" variable nil nil [71648 72007]) ("svn-status-parse-fixup-user-names-including-blanks" function nil nil [72172 72983]) ("svn-parse-status-result" function nil nil [72985 81660]) ("svn-status-sort-predicate" function (:arguments ("a" "b")) nil [81754 82034]) ("svn-status-remove-temp-file-maybe" function nil nil [82036 82444]) ("svn-status-remove-control-M" function (:user-visible-flag t) nil [82446 82753]) ("condition-case" code nil nil [82755 82974]) ("svn-status-mode-map" variable nil nil [82976 83051]) ("put" code nil nil [83052 83102]) ("svn-status-mode-mark-map" variable nil nil [83119 83214]) ("put" code nil nil [83215 83275]) ("svn-status-mode-property-map" variable nil nil [83292 83395]) ("put" code nil nil [83396 83456]) ("svn-status-mode-options-map" variable nil nil [83473 83573]) ("put" code nil nil [83574 83634]) ("svn-status-mode-trac-map" variable nil nil [83651 83760]) ("put" code nil nil [83761 83821]) ("svn-status-mode-extension-map" variable nil nil [83838 83950]) ("put" code nil nil [83951 84011]) ("svn-status-mode-branch-map" variable nil nil [84028 84130]) ("put" code nil nil [84131 84191]) ("svn-status-mode-search-map" variable nil nil [84208 84307]) ("put" code nil nil [84308 84370]) ("when" code nil nil [84388 89608]) ("when" code nil nil [89610 90725]) ("when" code nil nil [90727 91047]) ("when" code nil nil [91049 92850]) ("when" code nil nil [92851 93263]) ("when" code nil nil [93264 94191]) ("when" code nil nil [94192 94876]) ("when" code nil nil [94877 95114]) ("easy-menu-define" code nil nil [95116 100025]) ("svn-status-file-popup-menu-list" variable (:default-value (quote (["open" svn-status-find-file-other-window t] ["svn diff" svn-status-show-svn-diff t] ["svn commit" svn-status-commit t] ["svn log" svn-status-show-svn-log t] ["svn blame" svn-status-blame t] ["mark" svn-status-set-user-mark t] ["unmark" svn-status-unset-user-mark t] ["svn add" svn-status-add-file t] ["svn add recursively" svn-status-add-file-recursively t] ["svn mv..." svn-status-mv t] ["svn rm..." svn-status-rm t] ["svn lock" svn-status-lock t] ["svn unlock" svn-status-unlock t] ["svn info" svn-status-info t]))) nil [100027 100698]) ("svn-status-popup-menu" function (:user-visible-flag t :arguments ("event")) nil [100829 101373]) ("svn-status-face-set-temporary-during-popup" function (:arguments ("face" "begin" "end" "menu" "&optional" "prefix")) nil [101375 101773]) ("svn-status-mode" function (:user-visible-flag t) nil [101775 102598]) ("svn-status-update-mode-line" function nil nil [102600 102795]) ("svn-status-bury-buffer" function (:user-visible-flag t :arguments ("arg")) nil [102797 103679]) ("svn-status-save-some-buffers" function (:user-visible-flag t :arguments ("&optional" "tree")) nil [103681 104785]) ("svn-status-find-files" function (:user-visible-flag t) nil [104787 105049]) ("svn-status-find-file-other-window" function (:user-visible-flag t) nil [105052 105321]) ("svn-status-find-file-other-window-noselect" function (:user-visible-flag t) nil [105323 105635]) ("svn-status-view-file-other-window" function (:user-visible-flag t) nil [105637 105906]) ("svn-status-find-file-or-examine-directory" function (:user-visible-flag t) nil [105908 106345]) ("svn-status-examine-parent" function (:user-visible-flag t) nil [106347 106500]) ("svn-status-mouse-find-file-or-examine-directory" function (:user-visible-flag t :arguments ("event")) nil [106502 106793]) ("svn-status-line-info->ui-status" function (:arguments ("line-info")) nil [106795 106984]) ("svn-status-line-info->has-usermark" function (:arguments ("line-info")) nil [106986 107066]) ("svn-status-line-info->user-elide" function (:arguments ("line-info")) nil [107067 107145]) ("svn-status-line-info->filemark" function (:arguments ("line-info")) nil [107147 107215]) ("svn-status-line-info->propmark" function (:arguments ("line-info")) nil [107216 107284]) ("svn-status-line-info->filename" function (:arguments ("line-info")) nil [107285 107353]) ("svn-status-line-info->filename-nondirectory" function (:arguments ("line-info")) nil [107354 107487]) ("svn-status-line-info->localrev" function (:arguments ("line-info")) nil [107488 107602]) ("svn-status-line-info->lastchangerev" function (:arguments ("line-info")) nil [107603 107798]) ("svn-status-line-info->author" function (:arguments ("line-info")) nil [107799 107950]) ("svn-status-line-info->update-available" function (:arguments ("line-info")) nil [107951 108174]) ("svn-status-line-info->locked" function (:arguments ("line-info")) nil [108175 108482]) ("svn-status-line-info->historymark" function (:arguments ("line-info")) nil [108483 108707]) ("svn-status-line-info->switched" function (:arguments ("line-info")) nil [108708 108930]) ("svn-status-line-info->repo-locked" function (:arguments ("line-info")) nil [108931 109175]) ("svn-status-line-info->psvn-extra-info" function (:arguments ("line-info")) nil [109176 109412]) ("svn-status-line-info->is-visiblep" function (:arguments ("line-info")) nil [109414 110049]) ("svn-status-line-info->hide-because-unknown" function (:arguments ("line-info")) nil [110051 110203]) ("svn-status-line-info->hide-because-custom-hide-function" function (:arguments ("line-info")) nil [110205 110384]) ("svn-status-line-info->hide-because-unmodified" function (:arguments ("line-info")) nil [110386 111031]) ("svn-status-line-info->hide-because-user-elide" function (:arguments ("line-info")) nil [111033 111152]) ("svn-status-line-info->show-user-elide-continuation" function (:arguments ("line-info")) nil [111154 111287]) ("svn-status-line-info->set-filemark" function (:arguments ("line-info" "value")) nil [111313 111411]) ("svn-status-line-info->set-propmark" function (:arguments ("line-info" "value")) nil [111413 111511]) ("svn-status-line-info->set-localrev" function (:arguments ("line-info" "value")) nil [111513 111611]) ("svn-status-line-info->set-author" function (:arguments ("line-info" "value")) nil [111613 111709]) ("svn-status-line-info->set-lastchangerev" function (:arguments ("line-info" "value")) nil [111711 111814]) ("svn-status-line-info->set-repo-locked" function (:arguments ("line-info" "value")) nil [111816 111918]) ("svn-status-line-info->set-psvn-extra-info" function (:arguments ("line-info" "value")) nil [111920 112026]) ("svn-status-copy-current-line-info" function (:user-visible-flag t :arguments ("arg")) nil [112028 112564]) ("svn-status-copy-filename-as-kill" function (:user-visible-flag t :arguments ("arg")) nil [112566 112992]) ("svn-status-get-child-directories" function (:user-visible-flag t :arguments ("&optional" "dir")) nil [112994 113675]) ("svn-status-toggle-elide" function (:user-visible-flag t :arguments ("arg")) nil [113677 115941]) ("svn-status-apply-elide-list" function (:user-visible-flag t) nil [115943 117150]) ("svn-status-update-with-command-list" function (:arguments ("cmd-list")) nil [117152 118931]) ("svn-status-annotate-status-buffer-entry" function (:arguments ("action" "line-info")) nil [118933 121381]) ("svn-status-parse-commit-output" function nil nil [121554 123585]) ("svn-status-parse-ar-output" function nil nil [123666 124669]) ("svn-status-parse-update-output" function nil nil [124773 126763]) ("svn-status-parse-property-output" function nil nil [126875 127490]) ("svn-status-line-info->symlink-p" function (:arguments ("line-info")) nil [127608 128027]) ("svn-status-line-info->directory-p" function (:arguments ("line-info")) nil [128029 128287]) ("svn-status-line-info->full-path" function (:arguments ("line-info")) nil [128289 128470]) ("svn-status-count-/" function (:arguments ("string")) nil [128525 128721]) ("svn-insert-line-in-status-buffer" function (:arguments ("line-info")) nil [128723 134086]) ("svn-status-redraw-status-buffer" function (:user-visible-flag t) nil [134088 134393]) ("svn-status-update-buffer" function (:user-visible-flag t) nil [134395 139345]) ("svn-status-parse-info" function (:user-visible-flag t :arguments ("arg")) nil [139347 140088]) ("svn-status-parse-info-result" function nil nil [140090 140972]) ("svn-status-base-info->url" function nil nil [140974 141146]) ("svn-status-base-info->repository-root" function nil nil [141148 141356]) ("svn-status-checkout-prefix-path" function (:user-visible-flag t) nil [141358 142216]) ("svn-status-ls" function (:user-visible-flag t :arguments ("path" "&optional" "synchron")) nil [142218 142526]) ("svn-status-ls-branches" function (:user-visible-flag t) nil [142528 142816]) ("svn-status-ls-tags" function (:user-visible-flag t) nil [142818 143094]) ("svn-status-toggle-edit-cmd-flag" function (:user-visible-flag t :arguments ("&optional" "reset")) nil [143096 144107]) ("svn-status-goto-root-or-return" function (:user-visible-flag t) nil [144109 144574]) ("svn-status-next-line" function (:user-visible-flag t :arguments ("nr-of-lines")) nil [144576 145013]) ("svn-status-previous-line" function (:user-visible-flag t :arguments ("nr-of-lines")) nil [145015 145464]) ("svn-status-dired-jump" function (:user-visible-flag t) nil [145466 146194]) ("svn-status-possibly-negate-meaning-of-arg" function (:arguments ("arg" "&optional" "command")) nil [146196 146500]) ("svn-status-update" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [146502 146883]) ("svn-status-get-line-information" function nil nil [146885 147696]) ("svn-status-get-file-list" function (:arguments ("use-marked-files")) nil [147699 148007]) ("svn-status-get-file-list-names" function (:arguments ("use-marked-files")) nil [148009 148153]) ("svn-status-get-file-information" function nil nil [148155 148741]) ("svn-status-select-line" function (:user-visible-flag t) nil [148743 149195]) ("svn-status-ensure-cursor-on-file" function nil nil [149197 149381]) ("svn-status-directory-containing-point" function (:arguments ("allow-self")) nil [149383 150067]) ("svn-status-line-info->directory-containing-line-info" function (:arguments ("line-info" "allow-self")) nil [150069 150613]) ("svn-status-set-user-mark" function (:user-visible-flag t :arguments ("arg")) nil [150615 151306]) ("svn-status-unset-user-mark" function (:user-visible-flag t :arguments ("arg")) nil [151308 152013]) ("svn-status-unset-user-mark-backwards" function (:user-visible-flag t) nil [152015 152534]) ("svn-status-apply-usermark" function (:arguments ("set-mark" "only-this-line")) nil [152536 154572]) ("svn-status-apply-usermark-checked" function (:arguments ("check-function" "set-mark")) nil [154574 155480]) ("svn-status-mark-unknown" function (:user-visible-flag t :arguments ("arg")) nil [155482 155826]) ("svn-status-mark-added" function (:user-visible-flag t :arguments ("arg")) nil [155828 156168]) ("svn-status-mark-modified" function (:user-visible-flag t :arguments ("arg")) nil [156170 156762]) ("svn-status-mark-modified-properties" function (:user-visible-flag t :arguments ("arg")) nil [156764 157087]) ("svn-status-mark-deleted" function (:user-visible-flag t :arguments ("arg")) nil [157089 157448]) ("svn-status-mark-changed" function (:user-visible-flag t :arguments ("arg")) nil [157450 157869]) ("svn-status-unset-all-usermarks" function nil nil [157871 157989]) ("svn-status-store-usermarks" function (:user-visible-flag t :arguments ("arg")) nil [157991 158379]) ("svn-status-load-usermarks" function (:user-visible-flag t :arguments ("arg")) nil [158381 158788]) ("svn-status-regexp-history" variable nil nil [158790 158897]) ("svn-status-read-regexp" function (:arguments ("prompt")) nil [158899 159009]) ("svn-status-mark-filename-regexp" function (:user-visible-flag t :arguments ("regexp" "&optional" "unmark")) nil [159011 159525]) ("svn-status-mark-by-file-ext" function (:user-visible-flag t :arguments ("ext" "&optional" "unmark")) nil [159527 160120]) ("svn-status-toggle-hide-unknown" function nil nil [160122 160271]) ("svn-status-toggle-hide-unmodified" function nil nil [160273 160431]) ("svn-status-get-file-name-buffer-position" function (:arguments ("name")) nil [160433 161653]) ("svn-status-goto-file-name" function (:arguments ("name")) nil [161655 161931]) ("svn-status-find-info-for-file-name" function (:arguments ("name")) nil [161933 162252]) ("svn-status-marked-files" function nil nil [162254 163290]) ("svn-status-marked-file-names" function nil nil [163292 163400]) ("svn-status-some-files-marked-p" function nil nil [163402 163869]) ("svn-status-only-dirs-or-nothing-marked-p" function nil nil [163871 164324]) ("svn-status-ui-information-hash-table" function nil nil [164326 164740]) ("svn-status-create-arg-file" function (:arguments ("file-name" "prefix" "file-info-list" "postfix")) nil [164743 165072]) ("svn-status-show-process-buffer-internal" function (:arguments ("&optional" "scroll-to-top")) nil [165074 165481]) ("svn-status-show-process-output" function (:arguments ("cmd" "&optional" "scroll-to-top")) nil [165483 167158]) ("svn-status-svn-log-switches" function (:arguments ("arg")) nil [167160 167360]) ("svn-status-show-svn-log" function (:user-visible-flag t :arguments ("arg")) nil [167362 168217]) ("svn-status-version" function (:user-visible-flag t) nil [168219 169482]) ("svn-status-info" function (:user-visible-flag t) nil [169484 169781]) ("svn-status-info-for-path" function (:arguments ("path")) nil [169783 170459]) ("svn-status-blame" function (:user-visible-flag t :arguments ("revision" "&optional" "file-name")) nil [170461 171246]) ("svn-blame-blame-again" function (:user-visible-flag t :arguments ("arg")) nil [171248 171700]) ("svn-status-show-svn-diff" function (:user-visible-flag t :arguments ("arg")) nil [171702 172446]) ("svn-file-show-svn-diff" function (:user-visible-flag t :arguments ("arg")) nil [172448 172869]) ("svn-status-show-svn-diff-for-marked-files" function (:user-visible-flag t :arguments ("arg")) nil [172871 173515]) ("svn-status-diff-show-changeset" function (:arguments ("rev" "&optional" "user-confirmation" "rev-against")) nil [173517 174142]) ("svn-status-show-svn-diff-internal" function (:arguments ("line-infos" "recursive" "revision")) nil [174144 176521]) ("svn-status-diff-save-current-defun-as-kill" function (:user-visible-flag t) nil [176523 176903]) ("svn-status-diff-pop-to-commit-buffer" function (:user-visible-flag t) nil [176905 177333]) ("svn-status-activate-diff-mode" function nil nil [177335 177719]) ("define-derived-mode" code nil nil [177721 178092]) ("svn-status-diff-update" function (:user-visible-flag t :arguments ("arg" "noconfirm")) nil [178094 178361]) ("svn-status-show-process-buffer" function (:user-visible-flag t) nil [178363 178520]) ("svn-status-pop-to-partner-buffer" function (:user-visible-flag t) nil [178522 178818]) ("svn-status-pop-to-new-partner-buffer" function (:arguments ("buffer")) nil [178820 179069]) ("svn-status-add-file-recursively" function (:user-visible-flag t :arguments ("arg")) nil [179071 179599]) ("svn-status-add-file" function (:user-visible-flag t :arguments ("arg")) nil [179601 180199]) ("svn-status-lock" function (:user-visible-flag t :arguments ("arg")) nil [180201 180569]) ("svn-status-unlock" function (:user-visible-flag t :arguments ("arg")) nil [180571 180949]) ("svn-status-make-directory" function (:user-visible-flag t :arguments ("dir")) nil [180951 181384]) ("svn-status-mv" function (:user-visible-flag t) nil [181386 182155]) ("svn-status-cp" function (:user-visible-flag t) nil [182157 182266]) ("svn-status-mv-cp" function (:arguments ("command" "singleprompt" "manyprompt" "fallback")) nil [182268 187404]) ("svn-status-run-mv-cp" function (:arguments ("command" "original" "destination" "&optional" "force")) nil [187406 188562]) ("svn-status-revert" function (:user-visible-flag t) nil [188564 189243]) ("svn-file-revert" function (:user-visible-flag t) nil [189245 189441]) ("svn-status-rm" function (:user-visible-flag t :arguments ("force")) nil [189443 190838]) ("svn-status-update-cmd" function (:user-visible-flag t :arguments ("arg")) nil [190840 192005]) ("svn-status-commit" function (:user-visible-flag t) nil [192007 192794]) ("svn-status-pop-to-commit-buffer" function (:user-visible-flag t) nil [192796 193562]) ("svn-status-switch-to-status-buffer" function (:user-visible-flag t) nil [193564 193720]) ("svn-status-pop-to-status-buffer" function (:user-visible-flag t) nil [193722 193869]) ("svn-status-via-bookmark" function (:user-visible-flag t :arguments ("bookmark")) nil [193871 194418]) ("svn-status-export" function (:user-visible-flag t) nil [194420 194972]) ("svn-status-cleanup" function (:user-visible-flag t :arguments ("arg")) nil [194974 195509]) ("svn-status-resolved" function (:user-visible-flag t) nil [195511 196200]) ("svn-status-svnversion" function (:user-visible-flag t) nil [196203 196874]) ("svn-status-file-modified-after-save-flag" variable (:default-value 109) nil [197113 197319]) ("svn-status-after-save-hook" function nil nil [197320 199309]) ("add-hook" code nil nil [199311 199366]) ("svn-status-state-mark-modeline" variable (:default-value t) nil [199558 199599]) ("svn-status-state-mark-tooltip" variable nil nil [199631 199673]) ("svn-status-state-mark-modeline-dot" function (:arguments ("color")) nil [199702 200412]) ("svn-status-install-state-mark-modeline" function (:arguments ("color")) nil [200414 200619]) ("svn-status-uninstall-state-mark-modeline" function nil nil [200621 200894]) ("svn-status-update-state-mark-tooltip" function (:arguments ("tooltip")) nil [200896 200997]) ("svn-status-update-state-mark" function (:arguments ("color")) nil [200999 201137]) ("svn-status-in-vc-mode?" function nil nil [201139 201274]) ("when" code nil nil [201276 202379]) ("svn-status-update-modeline" function nil nil [202381 202638]) ("svn-status-interprete-state-mode-color" function (:arguments ("stat")) nil [202640 203005]) ("svn-status-get-specific-revision" function (:user-visible-flag t :arguments ("arg")) nil [203203 203587]) ("svn-status-get-specific-revision-internal" function (:arguments ("line-infos" "revision" "handle-relative-svn-status-dir")) nil [203589 209225]) ("svn-status-ediff-with-revision" function (:user-visible-flag t :arguments ("arg")) nil [209227 210492]) ("svn-ediff-startup-hook" function nil nil [210494 210842]) ("svn-ediff-exit-hook" function (:arguments ("svn-buf" "tmp-bufs")) nil [210844 211967]) ("svn-status-read-revision-string" function (:user-visible-flag t :arguments ("prompt" "&optional" "default-value")) nil [211970 212142]) ("svn-file-show-svn-ediff" function (:user-visible-flag t :arguments ("arg")) nil [212144 212464]) ("svn-process-kill" function (:user-visible-flag t) nil [212659 212875]) ("svn-process-send-string" function (:user-visible-flag t :arguments ("string" "&optional" "send-passwd")) nil [212877 213450]) ("svn-process-send-string-and-newline" function (:user-visible-flag t :arguments ("string" "&optional" "send-passwd")) nil [213452 214071]) ("svn-status-grep-files" function (:user-visible-flag t :arguments ("regexp")) nil [214262 214626]) ("svn-status-search-files" function (:user-visible-flag t :arguments ("search-string")) nil [214628 214882]) ("svn-status-property-list" function nil nil [215076 215366]) ("svn-status-proplist-start" function nil nil [215368 215598]) ("svn-status-property-edit-one-entry" function (:user-visible-flag t :arguments ("arg")) nil [215599 215854]) ("svn-status-property-set" function nil nil [215856 215990]) ("svn-status-property-delete" function nil nil [215992 216127]) ("svn-status-property-parse-property-names" function nil nil [216129 218711]) ("svn-status-property-edit" function (:arguments ("file-info-list" "prop-name" "&optional" "new-prop-value" "remove-values")) nil [218713 220609]) ("svn-status-property-set-property" function (:arguments ("file-info-list" "prop-name" "prop-value")) nil [220611 221185]) ("svn-status-get-directory" function (:arguments ("line-info")) nil [221188 221473]) ("svn-status-get-file-list-per-directory" function (:arguments ("files")) nil [221475 222043]) ("svn-status-property-ignore-file" function nil nil [222045 222833]) ("svn-status-property-ignore-file-extension" function nil nil [222835 223803]) ("svn-status-property-edit-svn-ignore" function nil nil [223805 224243]) ("svn-status-property-set-keyword-list" function (:user-visible-flag t) nil [224246 224506]) ("svn-status-property-set-keyword-id" function (:user-visible-flag t :arguments ("arg")) nil [224508 224873]) ("svn-status-property-set-keyword-date" function (:user-visible-flag t :arguments ("arg")) nil [224875 225250]) ("svn-status-property-set-eol-style" function (:user-visible-flag t) nil [225253 225606]) ("svn-status-property-set-executable" function (:user-visible-flag t :arguments ("&optional" "unset")) nil [225608 226156]) ("svn-status-property-set-mime-type" function (:user-visible-flag t) nil [226158 226730]) ("svn-prop-edit-mode-map" variable nil nil [226924 227005]) ("put" code nil nil [227006 227059]) ("when" code nil nil [227077 227609]) ("easy-menu-define" code nil nil [227611 228023]) ("svn-prop-edit-mode" function (:user-visible-flag t) nil [228025 228361]) ("svn-prop-edit-abort" function nil nil [228363 228499]) ("svn-prop-edit-done" function nil nil [228501 228572]) ("svn-prop-edit-do-it" function (:arguments ("async")) nil [228574 230035]) ("svn-prop-edit-svn-diff" function (:arguments ("arg")) nil [230037 230334]) ("svn-prop-edit-svn-log" function (:arguments ("arg")) nil [230336 230461]) ("svn-prop-edit-svn-status" function nil nil [230463 230574]) ("svn-log-edit-mode-map" variable nil nil [230767 230846]) ("put" code nil nil [230847 230899]) ("svn-log-edit-mode-menu" variable nil nil [230917 230948]) ("svn-log-edit-common-setup" function nil nil [230997 231191]) ("if" code nil nil [231193 232267]) ("when" code nil nil [232269 233026]) ("easy-menu-define" code nil nil [233028 233641]) ("put" code nil nil [233642 233695]) ("svn-log-edit-abort" function nil nil [233697 233830]) ("svn-log-edit-done" function (:user-visible-flag t) nil [233832 235921]) ("svn-log-edit-svn-diff" function (:user-visible-flag t :arguments ("arg")) nil [235923 236494]) ("svn-log-edit-svn-log" function (:arguments ("arg")) nil [236496 236620]) ("svn-log-edit-svn-status" function nil nil [236622 236732]) ("svn-log-edit-files-to-commit" function nil nil [236734 236843]) ("svn-log-edit-show-files-to-commit" function nil nil [236845 237045]) ("svn-log-edit-save-message" function (:user-visible-flag t) nil [237047 237367]) ("svn-log-edit-erase-edit-buffer" function (:user-visible-flag t) nil [237369 237547]) ("svn-log-edit-insert-files-to-commit" function nil nil [237549 238210]) ("svn-log-edit-remove-comment-lines" function nil nil [238212 238346]) ("svn-file-add-to-changelog" function (:user-visible-flag t :arguments ("prefix-arg")) nil [238348 238956]) ("svn-file-add-to-log-changelog-style" function (:user-visible-flag t :arguments ("curdir")) nil [238958 239359]) ("svn-dev-log-path-derive" function (:arguments ("path")) nil [239407 240081]) ("svn-file-add-to-log-svn-dev-style" function (:user-visible-flag t :arguments ("prefix-arg")) nil [240125 243883]) ("svn-log-view-mode-map" variable nil nil [244076 244155]) ("put" code nil nil [244156 244208]) ("when" code nil nil [244226 245297]) ("svn-log-view-popup-menu-map" variable nil nil [245299 245405]) ("put" code nil nil [245406 245464]) ("when" code nil nil [245481 245710]) ("easy-menu-define" code nil nil [245712 246291]) ("svn-log-view-popup-menu" function (:arguments ("event")) nil [246293 246594]) ("svn-log-view-font-lock-basic-keywords" variable (:default-value (quote (("^r[0-9]+ .+" (0 (\` (face font-lock-keyword-face mouse-face highlight keymap (\, svn-log-view-popup-menu-map)))))))) nil [246596 246846]) ("put" code nil nil [246847 246915]) ("svn-log-view-font-lock-keywords" variable nil nil [246933 246973]) ("define-derived-mode" code nil nil [246974 247534]) ("svn-log-view-next" function nil nil [247536 247723]) ("svn-log-view-prev" function nil nil [247725 247915]) ("svn-log-mark-partner-revision" function (:user-visible-flag t) nil [247917 248782]) ("svn-log-exchange-partner-mark-with-point" function nil nil [248784 249213]) ("svn-log-revision-for-diff" function nil nil [249215 249616]) ("svn-log-revision-at-point" function nil nil [249618 249772]) ("svn-log-file-name-at-point" function (:arguments ("respect-checkout-prefix-path")) nil [249774 250873]) ("svn-log-find-file-at-point" function nil nil [250875 251192]) ("svn-log-next-link" function (:user-visible-flag t) nil [251194 251544]) ("svn-log-prev-link" function (:user-visible-flag t) nil [251546 251921]) ("svn-log-view-diff" function (:user-visible-flag t :arguments ("arg")) nil [251923 252182]) ("svn-log-get-specific-revision" function (:user-visible-flag t) nil [252184 252692]) ("svn-log-ediff-specific-revision" function (:user-visible-flag t :arguments ("&optional" "user-confirmation")) nil [252694 254812]) ("svn-log-edit-log-entry" function (:user-visible-flag t) nil [254814 255581]) ("svn-log-link-keymap" variable nil nil [255635 255728]) ("put" code nil nil [255729 255779]) ("when" code nil nil [255796 256060]) ("svn-log-resolve-mouse-link" function (:arguments ("event")) nil [256062 256175]) ("svn-log-resolve-link" function nil nil [256177 256784]) ("svn-log-register-link-handler" function (:arguments ("handler-id" "link-regexp" "handler-function")) nil [256786 257799]) ("svn-log-resolve-trac-ticket-short" function (:user-visible-flag t :arguments ("link-name")) nil [258091 258360]) ("svn-log-register-link-handler" code nil nil [258416 258511]) ("svn-info-mode-map" variable nil nil [258773 258844]) ("put" code nil nil [258845 258893]) ("when" code nil nil [258911 259368]) ("svn-info-mode" function (:user-visible-flag t) nil [259370 259615]) ("svn-info-show-context" function (:user-visible-flag t) nil [259617 260667]) ("unless" code nil nil [260862 261017]) ("svn-blame-mode-map" variable nil nil [261019 261092]) ("put" code nil nil [261093 261142]) ("when" code nil nil [261160 261970]) ("easy-menu-define" code nil nil [261972 262569]) ("or" code nil nil [262571 262731]) ("make-variable-buffer-local" code nil nil [262733 262777]) ("svn-blame-mode" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [262779 263437]) ("svn-status-activate-blame-mode" function nil nil [263439 265165]) ("svn-blame-open-source-file" function (:user-visible-flag t) nil [265167 265519]) ("svn-blame-rev-at-point" function nil nil [265521 265752]) ("svn-blame-show-changeset" function (:user-visible-flag t :arguments ("arg")) nil [265754 265992]) ("svn-blame-show-log" function (:user-visible-flag t :arguments ("arg")) nil [265994 266617]) ("svn-blame-highlight-line-maybe" function (:arguments ("compare-func")) nil [266619 267890]) ("svn-blame-show-statistics" function (:user-visible-flag t) nil [267892 268953]) ("svn-blame-highlight-author-field" function (:arguments ("ov")) nil [268955 269036]) ("svn-blame-highlight-author" function (:user-visible-flag t) nil [269038 269210]) ("svn-blame-highlight-revision-field" function (:arguments ("ov")) nil [269212 269294]) ("svn-blame-highlight-revision" function (:user-visible-flag t) nil [269296 269474]) ("svn-process-mode-map" variable nil nil [269664 269741]) ("put" code nil nil [269742 269793]) ("when" code nil nil [269811 270100]) ("easy-menu-define" code nil nil [270102 270441]) ("svn-process-mode" function (:user-visible-flag t) nil [270443 270886]) ("svn-status-repo-for-path" function (:arguments ("directory")) nil [271090 272305]) ("svn-status-base-dir" function (:arguments ("&optional" "start-directory")) nil [272307 274395]) ("svn-status-base-dir-for-ancient-svn-client" function (:arguments ("&optional" "start-directory")) nil [274397 275316]) ("svn-status-save-state" function (:user-visible-flag t) nil [275318 276146]) ("svn-status-load-state" function (:user-visible-flag t :arguments ("&optional" "no-error")) nil [276148 277598]) ("svn-status-toggle-sort-status-buffer" function (:user-visible-flag t) nil [277600 278131]) ("svn-status-toggle-svn-verbose-flag" function (:user-visible-flag t) nil [278133 278370]) ("svn-status-toggle-display-full-path" function (:user-visible-flag t) nil [278372 278745]) ("svn-status-set-trac-project-root" function nil nil [278747 279077]) ("svn-status-set-module-name" function (:user-visible-flag t) nil [279079 279427]) ("svn-status-set-changelog-style" function (:user-visible-flag t) nil [279429 279933]) ("svn-status-set-branch-list" function (:user-visible-flag t) nil [279935 280316]) ("svn-browse-url" function (:arguments ("url")) nil [280318 280561]) ("svn-trac-browse-wiki" function (:user-visible-flag t) nil [280762 280998]) ("svn-trac-browse-timeline" function (:user-visible-flag t) nil [281000 281248]) ("svn-trac-browse-roadmap" function (:user-visible-flag t) nil [281250 281495]) ("svn-trac-browse-source" function (:user-visible-flag t) nil [281497 281743]) ("svn-trac-browse-report" function (:user-visible-flag t :arguments ("arg")) nil [281745 282104]) ("svn-trac-browse-changeset" function (:user-visible-flag t :arguments ("changeset-nr")) nil [282106 282452]) ("svn-trac-browse-ticket" function (:user-visible-flag t :arguments ("ticket-nr")) nil [282454 282782]) ("svn-resolve-conflicts-ediff" function (:user-visible-flag t :arguments ("&optional" "name-A" "name-B")) nil [282946 286299]) ("svn-resolve-conflicts" function (:arguments ("filename")) nil [286301 286533]) ("svn-status-resolve-conflicts" function (:user-visible-flag t) nil [286535 286929]) ("svn-branch-select" function (:user-visible-flag t :arguments ("&optional" "prompt")) nil [287126 288068]) ("svn-branch-diff" function (:user-visible-flag t :arguments ("branch1" "branch2")) nil [288070 288534]) ("svn-admin-create" function (:user-visible-flag t :arguments ("dir")) nil [288726 289202]) ("svn-admin-create-trunk-directory" function (:user-visible-flag t) nil [289351 289939]) ("svn-admin-start-import" function (:user-visible-flag t) nil [289941 290693]) ("svn-status-elp-init" function nil nil [291041 291247]) ("svn-status-last-commands" function (:user-visible-flag t :arguments ("&optional" "string-prefix")) nil [291249 291622]) ("svn-insert-indented-lines" function (:arguments ("text")) nil [291810 291993]) ("svn-prepare-bug-report" function (:user-visible-flag t) nil [291995 293290]) ("svn-prepare-for-reload-dont-touch-list" variable (:default-value (quote nil)) nil [293937 294065]) ("svn-prepare-for-reload-variables-list" variable (:default-value (quote (svn-global-keymap svn-status-diff-mode-map svn-global-trac-map svn-status-mode-map svn-status-mode-property-map svn-status-mode-extension-map svn-status-mode-options-map svn-status-mode-trac-map svn-status-mode-branch-map svn-log-edit-mode-map svn-log-view-mode-map svn-log-view-popup-menu-map svn-info-mode-map svn-blame-mode-map svn-process-mode-map))) nil [294066 294742]) ("svn-prepare-for-reload" function (:user-visible-flag t) nil [294743 295371]) ("psvn" package nil nil [295373 295388]))
    :file "psvn.el"
    :pointmax 295465
    )
   (semanticdb-table "regex-tool.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [3061 3074]) ("defgroup" code nil nil [3077 3187]) ("regex-tool-mode-map" variable (:default-value (make-sparse-keymap)) nil [3189 3238]) ("regex-tool-mode-abbrev-table" variable nil nil [3239 3276]) ("regex-tool-old-window-configuration-temp" variable nil nil [3277 3330]) ("define-derived-mode" code nil nil [3332 4055]) ("regex-tool-matched-face" variable (:default-value (quote ((((background light)) (:foreground "Red" :bold t)) (((background dark)) (:foreground "Orange" :bold t))))) nil [4057 4229]) ("regex-tool-backend" variable (:default-value (quote emacs)) nil [4231 4559]) ("regex-tool-new-frame" variable (:user-visible-flag t :default-value t) nil [4561 4758]) ("regex-render-perl" function (:arguments ("regex" "sample")) nil [4760 5252]) ("regex-expr-buffer" variable nil nil [5254 5284]) ("regex-text-buffer" variable nil nil [5285 5315]) ("regex-group-buffer" variable nil nil [5316 5347]) ("regex-old-buffer" variable nil nil [5348 5377]) ("regex-tool-create-work-area" function nil nil [5379 6140]) ("regex-tool-destroy-work-area" function nil nil [6142 6935]) ("regex-tool" function nil nil [6937 7514]) ("regex-tool-current-regex" function nil nil [7516 7672]) ("regex-tool-markup-text" function (:arguments ("&optional" "beg" "end" "len")) nil [7674 10189]) ("def-regex-tool-text-window-operation" function (:arguments ("opname" "opdoc" "work")) nil [10191 10549]) ("def-regex-tool-text-window-operation" code nil nil [10551 10734]) ("def-regex-tool-text-window-operation" code nil nil [10736 10914]) ("def-regex-tool-text-window-operation" code nil nil [10916 11028]) ("def-regex-tool-text-window-operation" code nil nil [11030 11148]) ("regex-tool-insert-old-buffer-contents" function (:user-visible-flag t) nil [11151 11466]) ("regex-tool-quit" function nil nil [11468 11546]) ("regex-tool" package nil nil [11548 11569]))
    :file "regex-tool.el"
    :pointmax 11597
    )
   (semanticdb-table "eselect-mode-keywords.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("eselect-mode-keywords-0" variable (:default-value (quote ("die" "is_function" "has"))) nil [814 877]) ("eselect-mode-keywords-1" variable (:default-value (quote ("store_config" "load_config" "add_config"))) nil [879 958]) ("eselect-mode-keywords-2" variable (:default-value (quote ("svn_date_to_version"))) nil [960 1019]) ("eselect-mode-keywords-3" variable (:default-value (quote ("list_libdirs"))) nil [1021 1073]) ("eselect-mode-keywords-eselect" variable (:default-value (quote ("highlight" "highlight_warning" "space" "write_error_msg" "write_kv_list_entry" "write_list_start" "write_numbered_list" "write_numbered_list_entry"))) nil [1075 1275]) ("eselect-mode-keywords-5" variable (:default-value (quote ("is_number" "canonicalise"))) nil [1277 1341]) ("font-lock-add-keywords" code nil nil [1343 1779]))
    :file "eselect-mode-keywords.el"
    :pointmax 1820
    )
   (semanticdb-table "ebuild-mode-keywords.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ebuild-mode-keywords-0" variable (:default-value (quote ("best_version" "check_KV" "die" "diropts" "dobin" "docinto" "doconfd" "dodir" "dodoc" "doenvd" "doexe" "dohard" "dohtml" "doinfo" "doinitd" "doins" "dojar" "dolib" "dolib.a" "dolib.so" "doman" "domo" "dopython" "dosbin" "dosed" "dosym" "ebegin" "econf" "eend" "eerror" "einfo" "einfon" "einstall" "elog" "emake" "ewarn" "exeinto" "exeopts" "fowners" "fperms" "has" "has_version" "hasq" "hasv" "insinto" "insopts" "into" "keepdir" "libopts" "newbin" "newconfd" "newdoc" "newenvd" "newexe" "newinitd" "newins" "newlib.a" "newlib.so" "newman" "newsbin" "prepall" "prepalldocs" "prepallinfo" "prepallman" "prepallstrip" "unpack" "use" "use_enable" "use_with" "useq" "usev"))) nil [991 1732]) ("ebuild-mode-keywords-functions" variable (:default-value (quote ("pkg_nofetch" "pkg_setup" "src_unpack" "src_prepare" "src_configure" "src_compile" "src_test" "src_install" "pkg_preinst" "pkg_postinst" "pkg_prerm" "pkg_postrm" "pkg_config"))) nil [1734 1961]) ("ebuild-mode-keywords-warn" variable (:default-value (quote ("which"))) nil [1963 2107]) ("ebuild-mode-keywords-gnustep-funcs" variable (:default-value (quote ("egnustep_prefix" "egnustep_install_domain" "egnustep_env" "egnustep_system_root" "egnustep_local_root" "egnustep_network_root" "egnustep_user_root" "egnustep_user_root_suffix" "egnustep_make" "egnustep_package_config" "egnustep_package_config_info" "egnustep_install" "egnustep_doc" "objc_available" "objc_not_available_info" "ffi_available" "ffi_not_available_info"))) nil [2109 2545]) ("ebuild-mode-keywords-freebsd" variable (:default-value (quote ("doperiodic" "freebsd_get_bmake" "freebsd_do_patches" "freebsd_rename_libraries"))) nil [2547 2674]) ("ebuild-mode-keywords-cron" variable (:default-value (quote ("docrondir" "docron" "docrontab"))) nil [2676 2748]) ("ebuild-mode-keywords-toolchain-binutils" variable (:default-value (quote ("is_cross" "add_src_uri" "tc-binutils_unpack" "tc-binutils_apply_patches"))) nil [2750 2881]) ("ebuild-mode-keywords-toolchain-funcs" variable (:default-value (quote ("tc-getPROG" "tc-getAR" "tc-getAS" "tc-getCC" "tc-getCPP" "tc-getCXX" "tc-getLD" "tc-getSTRIP" "tc-getNM" "tc-getRANLIB" "tc-getF77" "tc-getF90" "tc-getFORTRAN" "tc-getGCJ" "tc-getBUILD_CC" "tc-export" "tc-is-cross-compiler" "tc-ninja_magic_to_arch" "tc-arch-kernel" "tc-arch" "tc-endian" "gcc-fullversion" "gcc-version" "gcc-major-version" "gcc-minor-version" "gcc-micro-version"))) nil [2883 3334]) ("ebuild-mode-keywords-toolchain" variable (:default-value (quote ("is_crosscompile" "tc_version_is_at_least" "gcc_get_s_dir" "gentoo_urls" "get_gcc_src_uri" "get_make_var" "XGCC" "hardened_gcc_works" "hardened_gcc_is_stable" "hardened_gcc_check_unsupported" "has_libssp" "want_libssp" "want_boundschecking" "want_pie" "want_ssp" "want_split_specs" "glibc_have_pie" "libc_has_ssp" "gcc-lang-supported" "make_gcc_hard" "create_vanilla_specs_file" "create_hardened_specs_file" "create_hardenednossp_specs_file" "create_hardenednopie_specs_file" "create_hardenednopiessp_specs_file" "split_out_specs_files" "create_gcc_env_entry" "add_profile_eselect_conf" "create_eselect_conf" "guess_patch_type_in_dir" "do_gcc_rename_java_bins" "gcc-library-configure" "gcc-compiler-configure" "gcc_do_configure" "gcc_do_make" "add_version_to_shared" "gcc_do_filter_flags" "gcc_movelibs" "gcc_quick_unpack" "exclude_gcc_patches" "do_gcc_stub" "do_gcc_HTB_patches" "do_gcc_SSP_patches" "update_gcc_for_libc_ssp" "update_gcc_for_libssp" "do_gcc_PIE_patches" "should_we_gcc_config" "do_gcc_config" "should_we_eselect_compiler" "do_eselect_compiler" "gcc_version_patch" "disgusting_gcc_multilib_HACK" "disable_multilib_libjava" "fix_libtool_libdir_paths" "is_multilib" "is_cxx" "is_d" "is_f77" "is_f95" "is_fortran" "is_gcj" "is_objc" "is_objcxx" "is_ada"))) nil [3336 4724]) ("ebuild-mode-keywords-libtool" variable (:default-value (quote ("elibtoolize" "uclibctoolize" "darwintoolize"))) nil [4726 4814]) ("ebuild-mode-keywords-fixheadtails" variable (:default-value (quote ("ht_fix_file" "ht_fix_all"))) nil [4816 4890]) ("ebuild-mode-keywords-webapp" variable (:default-value (quote ("webapp_checkfileexists" "webapp_import_config" "webapp_strip_appdir" "webapp_strip_d" "webapp_strip_cwd" "webapp_configfile" "webapp_hook_script" "webapp_postinst_txt" "webapp_postupgrade_txt" "webapp_runbycgibin" "webapp_serverowned" "webapp_server_configfile" "webapp_sqlscript" "webapp_src_install" "webapp_pkg_postinst" "webapp_pkg_setup" "webapp_getinstalltype" "webapp_src_preinst" "webapp_pkg_prerm"))) nil [4892 5365]) ("ebuild-mode-keywords-darcs" variable (:default-value (quote ("darcs_src_unpack"))) nil [5367 5426]) ("ebuild-mode-keywords-php-common-r1" variable (:default-value (quote ("php_check_cflags" "php_check_imap" "php_check_java" "php_install_java" "php_install_java_inifile" "php_check_mta" "php_check_oracle_all" "php_check_oracle_8" "php_check_pgsql" "php_get_mycnf_charset"))) nil [5428 5685]) ("ebuild-mode-keywords-php-ext-base-r1" variable (:default-value (quote ("php-ext-base-r1_buildinilist" "php-ext-base-r1_src_install" "php-ext-base-r1_addextension" "php-ext-base-r1_addtoinifile" "php-ext-base-r1_addtoinifiles"))) nil [5687 5900]) ("ebuild-mode-keywords-php-ext" variable (:default-value (quote ("php-ext_buildinilist" "php-ext_extension_is_present" "php-ext_addextensiontoinifile" "php-ext_addextension" "php-ext_setting_is_present" "php-ext_addtoinifile" "php-ext_addtoinifiles"))) nil [5902 6141]) ("ebuild-mode-keywords-php-pear-r1" variable (:default-value (quote ("fix_PEAR_PV"))) nil [6143 6203]) ("ebuild-mode-keywords-php-sapi" variable (:default-value (quote ("php-sapi_is_providerbuild" "php-sapi_check_java_config" "php-sapi_securityupgrade" "php-sapi_warning_mssql_freetds"))) nil [6205 6369]) ("ebuild-mode-keywords-php4_4-sapi" variable (:default-value (quote ("php4_4-sapi_check_use_flags" "php4_4-sapi_set_php_ini_dir" "php4_4-sapi_install_ini"))) nil [6371 6507]) ("ebuild-mode-keywords-php5-sapi-r3" variable (:default-value (quote ("php5-sapi-r3_check_awkward_uses"))) nil [6509 6590]) ("ebuild-mode-keywords-mozilla-launcher" variable (:default-value (quote ("update_mozilla_launcher_symlinks" "install_mozilla_launcher_stub" "warn_mozilla_launcher_stub"))) nil [6592 6743]) ("ebuild-mode-keywords-mozconfig" variable (:default-value (quote ("mozconfig_init" "makemake" "mozconfig_annotate" "mozconfig_use_enable" "mozconfig_use_with" "mozconfig_use_extension" "mozconfig_final"))) nil [6745 6930]) ("ebuild-mode-keywords-mozconfig-2" variable (:default-value (quote ("mozconfig_config"))) nil [6932 6997]) ("ebuild-mode-keywords-mozcoreconf" variable (:default-value (quote ("mozconfig_init" "makemake" "makemake2" "mozconfig_annotate" "mozconfig_use_enable" "mozconfig_use_with" "mozconfig_use_extension" "mozconfig_final"))) nil [6999 7202]) ("ebuild-mode-keywords-mozextensions" variable (:default-value (quote ("xpi_unpack" "xpi_install"))) nil [7204 7279]) ("ebuild-mode-keywords-db" variable (:default-value (quote ("db_fix_so" "db_src_install_usrbinslot" "db_src_install_headerslota" "db_src_install_usrlibcleanup"))) nil [7281 7422]) ("ebuild-mode-keywords-db-use" variable (:default-value (quote ("db_ver_to_slot" "db_findver" "db_includedir" "db_libname"))) nil [7424 7524]) ("ebuild-mode-keywords-db4-fix" variable (:default-value (quote ("dodb4-fix"))) nil [7526 7580]) ("ebuild-mode-keywords-64-bit" variable (:default-value (quote ("64-bit"))) nil [7582 7632]) ("ebuild-mode-keywords-xfce44" variable (:default-value (quote ("xfce44_beta" "xfce44" "xfce44_gzipped" "xfce44_zipped" "xfce44_plugin" "xfce44_panel_plugin" "xfce44_thunar_plugin" "xfce44_goodies" "xfce44_goodies_panel_plugin" "xfce44_goodies_thunar_plugin" "xfce44_core_package" "xfce44_extra_package" "xfce44_single_make" "xfce44_want_einstall"))) nil [7634 7975]) ("ebuild-mode-keywords-x11" variable (:default-value (quote ("vcards" "filter-patch" "check_version_h" "get_KV_info" "is_kernel" "strip_bins" "arch" "archq" "use_build"))) nil [7977 8127]) ("ebuild-mode-keywords-confutils" variable (:default-value (quote ("confutils_init" "confutils_require_any" "confutils_use_conflict" "confutils_use_depend_all" "confutils_use_depend_any" "enable_extension_disable" "enable_extension_enable" "enable_extension_enableonly" "enable_extension_without" "enable_extension_with" "enable_extension_withonly" "confutils_warn_about_missing_deps" "enable_extension_enable_built_with" "enable_extension_with_built_with"))) nil [8129 8587]) ("ebuild-mode-keywords-linux-info" variable (:default-value (quote ("qout" "qeinfo" "qeerror" "getfilevar" "linux_chkconfig_present" "linux_chkconfig_module" "linux_chkconfig_builtin" "linux_chkconfig_string" "kernel_is" "get_localversion" "get_version" "get_running_version" "check_kernel_built" "check_modules_supported" "check_extra_config" "check_zlibinflate"))) nil [8589 8946]) ("ebuild-mode-keywords-linux-mod" variable (:default-value (quote ("check_vermagic" "use_m" "convert_to_m" "update_depmod" "update_modules" "move_old_moduledb" "update_moduledb" "remove_moduledb" "set_kvobj" "get-KERNEL_CC" "generate_modulesd" "find_module_params" "strip_modulenames"))) nil [8948 9222]) ("ebuild-mode-keywords-nsplugin" variable (:default-value (quote ("src_mv_plugins" "pkg_mv_plugins" "inst_plugin"))) nil [9224 9315]) ("ebuild-mode-keywords-latex-package" variable (:default-value (quote ("latex-package_has_tetex_3" "latex-package_src_doinstall" "latex-package_rehash" "latex-package_pkg_postinst" "latex-package_pkg_postrm" "latex-package_src_compile" "latex-package_src_install"))) nil [9317 9570]) ("ebuild-mode-keywords-autotools" variable (:default-value (quote ("eautoreconf" "eaclocal" "_elibtoolize" "eautoconf" "eautoheader" "eautomake"))) nil [9572 9698]) ("ebuild-mode-keywords-gtk-sharp-component" variable (:default-value (quote ("gtk-sharp-component_fix_makefiles"))) nil [9700 9790]) ("ebuild-mode-keywords-qt3" variable (:default-value (quote ("qt_min_version" "qt_min_version_list"))) nil [9792 9869]) ("ebuild-mode-keywords-qt4" variable (:default-value (quote ("qt4_min_version" "qt4_min_version_list"))) nil [9871 9950]) ("ebuild-mode-keywords-kde-functions" variable (:default-value (quote ("get-parent-package" "get-child-packages" "is-parent-package" "need-automake" "need-autoconf" "deprange" "deprange-list" "deprange-iterate-numbers" "deprange-iterate-suffixes" "deprange-dual" "need-kde" "set-kdedir" "need-qt" "set-qtdir" "qtver-from-kdever" "min-kde-ver" "kde_sandbox_patch" "kde_remove_flag" "buildsycoca" "postprocess_desktop_entries"))) nil [9952 10374]) ("ebuild-mode-keywords-kde-meta" variable (:default-value (quote ("create_fullpaths" "change_makefiles" "set_common_variables"))) nil [10376 10480]) ("ebuild-mode-keywords-kde" variable (:default-value (quote ("slot_rebuild"))) nil [10482 10535]) ("ebuild-mode-keywords-gst-plugins" variable (:default-value (quote ("gst-plugins_find_plugin_dir" "gst-plugins_update_registry" "gst-plugins_remove_unversioned_binaries"))) nil [10537 10689]) ("ebuild-mode-keywords-gst-plugins10" variable (:default-value (quote ("gst-plugins10_find_plugin_dir" "gst-plugins10_remove_unversioned_binaries"))) nil [10691 10819]) ("ebuild-mode-keywords-libtool" variable (:default-value (quote ("ELT_find_ltmain_sh" "ELT_try_and_apply_patch" "ELT_libtool_version" "ELT_walk_patches" "elibtoolize" "VER_major" "VER_minor" "VER_micro" "VER_to_int"))) nil [10821 11022]) ("ebuild-mode-keywords-multilib" variable (:default-value (quote ("has_multilib_profile" "get_libdir" "get_multilibdir" "get_libdir_override" "get_abi_var" "get_install_abis" "get_all_abis" "get_all_libdirs" "is_final_abi" "number_abis" "get_ml_incdir" "prep_ml_includes" "create_ml_includes" "get_libname" "multilib_env" "multilib_toolchain_setup" "get_abi_CFLAGS" "get_abi_LDFLAGS" "get_abi_CHOST" "get_abi_FAKE_TARGETS" "get_abi_CDEFINE" "get_abi_LIBDIR" "create_ml_includes-absolute" "create_ml_includes-tidy_path" "create_ml_includes-listdirs" "create_ml_includes-makedestdirs" "create_ml_includes-allfiles" "create_ml_includes-sym_for_dir"))) nil [11024 11679]) ("ebuild-mode-keywords-java-ant-2" variable (:default-value (quote ("java-ant_bsfix_files" "java-ant_bsfix_one" "java-ant_rewrite-classpath" "java-ant_ignore-system-classes" "java-ant_xml-rewrite"))) nil [11681 11859]) ("ebuild-mode-keywords-java-utils-2" variable (:default-value (quote ("java-pkg_doexamples" "java-pkg_dojar" "java-pkg_regjar" "java-pkg_newjar" "java-pkg_addcp" "java-pkg_doso" "java-pkg_regso" "java-pkg_jarinto" "java-pkg_sointo" "java-pkg_dohtml" "java-pkg_dojavadoc" "java-pkg_dosrc" "java-pkg_dolauncher" "java-pkg_dowar" "java-pkg_jar-from" "java-pkg_jarfrom" "java-pkg_getjars" "java-pkg_getjar" "java-pkg_register-dependency" "java-pkg_register-optional-dependency" "java-pkg_register-environment-variable" "java-pkg_find-normal-jars" "java-pkg_ensure-no-bundled-jars" "java-pkg_get-source" "java-pkg_set-current-vm" "java-pkg_get-current-vm" "java-pkg_current-vm-matches" "java-pkg_get-target" "java-pkg_get-javac" "java-pkg_javac-args" "java-pkg_get-jni-cflags" "java-pkg_ensure-gcj" "java-pkg_ensure-test" "java-pkg_register-ant-task" "ejunit" "eant" "ejavac" "java-pkg_filter-compiler" "java-pkg_force-compiler" "use_doc"))) nil [11861 12820]) ("ebuild-mode-keywords-bash-completion" variable (:default-value (quote ("dobashcompletion" "bash-completion_pkg_postinst"))) nil [12822 12922]) ("ebuild-mode-keywords-fdo-mime" variable (:default-value (quote ("fdo-mime_desktop_database_update" "fdo-mime_mime_database_update"))) nil [12924 13034]) ("ebuild-mode-keywords-gnome2-utils" variable (:default-value (quote ("gnome2_gconf_install" "gconf_uninstall" "icon_cache_update" "gnome2_omf_fix" "gnome2_scrollkeeper_update"))) nil [13036 13194]) ("ebuild-mode-keywords-gnome2" variable (:default-value (quote ("gnome2_src_configure" "gnome2_src_compile" "gnome2_src_install" "gnome2_gconf_uninstall" "gnome2_pkg_postinst" "gnome2_pkg_postrm"))) nil [13196 13373]) ("ebuild-mode-keywords-alternatives" variable (:default-value (quote ("alternatives_pkg_postinst" "alternatives_pkg_postrm" "alternatives_makesym" "alternatives_auto_makesym"))) nil [13375 13531]) ("ebuild-mode-keywords-eutils" variable (:default-value (quote ("epause" "ebeep" "epatch" "emktemp" "enewuser" "enewgroup" "edos2unix" "make_desktop_entry" "validate_desktop_entries" "make_session_desktop" "domenu" "newmenu" "doicon" "newicon" "check_license" "cdrom_get_cds" "cdrom_load_next_cd" "strip-linguas" "set_arch_to_kernel" "set_arch_to_portage" "preserve_old_lib" "preserve_old_lib_notify" "built_with_use" "epunt_cxx" "make_wrapper" "gen_usr_ldscript" "draw_line" "have_NPTL" "get_number_of_jobs" "egetent" "unpack_pdv" "unpack_makeself" "cdrom_load_next" "cdrom_locate_file_on_cd" "find_unpackable_file"))) nil [13533 14155]) ("ebuild-mode-keywords-pam" variable (:default-value (quote ("dopamd" "newpamd" "dopamsecurity" "newpamsecurity" "getpam_mod_dir" "dopammod" "newpammod" "pamd_mimic_system" "clean_pamd"))) nil [14157 14324]) ("ebuild-mode-keywords-mysql" variable (:default-value (quote ("bitkeeper_fetch" "mysql_disable_test" "mysql_init_vars" "configure_minimal" "configure_common" "configure_40_41_50" "configure_51"))) nil [14326 14506]) ("ebuild-mode-keywords-mysql_fx" variable (:default-value (quote ("stripdots" "mysql_check_version_range" "mysql_mv_patches" "mysql_version_is_at_least" "mysql_lib_symlinks"))) nil [14508 14663]) ("ebuild-mode-keywords-cvs" variable (:default-value (quote ("cvs_src_unpack" "cvs-fetch"))) nil [14665 14732]) ("ebuild-mode-keywords-subversion" variable (:default-value (quote ("subversion_src_unpack" "subversion_svn_fetch" "subversion_bootstrap"))) nil [14734 14849]) ("ebuild-mode-keywords-git" variable (:default-value (quote ("git_src_unpack"))) nil [14851 14906]) ("ebuild-mode-keywords-mercurial" variable (:default-value (quote ("mercurial_src_unpack"))) nil [14908 14975]) ("ebuild-mode-keywords-rpm" variable (:default-value (quote ("rpm_src_unpack"))) nil [14977 15032]) ("ebuild-mode-keywords-vim" variable (:default-value (quote ("apply_vim_patches" "update_vim_symlinks"))) nil [15034 15114]) ("ebuild-mode-keywords-vim-doc" variable (:default-value (quote ("update_vim_helptags"))) nil [15116 15180]) ("ebuild-mode-keywords-vim-plugin" variable (:default-value (quote ("vim-plugin_src_install" "vim-plugin_pkg_postinst" "vim-plugin_pkg_postrm" "update_vim_afterscripts" "display_vim_plugin_help"))) nil [15182 15358]) ("ebuild-mode-keywords-sandbox" variable (:default-value (quote ("adddeny" "addpredict" "addread" "addwrite"))) nil [15360 15446]) ("ebuild-mode-keywords-eclass" variable (:default-value (quote ("inherit"))) nil [15448 15499]) ("ebuild-mode-keywords-flag-o-matic" variable (:default-value (quote ("append-flags" "append-ldflags" "filter-flags" "filter-ldflags" "filter-mfpmath" "get-flag" "is-flag" "replace-cpu-flags" "replace-flags" "strip-flags" "strip-unsupported-flags" "setup-allowed-flags" "filter-lfs-flags" "append-lfs-flags" "test_flag" "test_version_info" "has_hardened" "has_pic" "has_pie" "has_ssp_all" "has_ssp" "has_m64" "has_m32" "replace-sparc64-flags" "fstack-flags" "gcc2-flags"))) nil [15501 15969]) ("ebuild-mode-keywords-python" variable (:default-value (quote ("NEED_PYTHON" "DOCS" "python_version" "python_tkinter_exists" "python_mod_exists" "python_mod_compile" "python_mod_optimize" "python_mod_cleanup" "python_makesym" "python_disable_pyc" "python_enable_pyc"))) nil [15971 16228]) ("ebuild-mode-keywords-common-lisp-common-3" variable (:default-value (quote ("do-debian-credits" "standard-impl-postinst" "standard-impl-postrm"))) nil [16230 16353]) ("ebuild-mode-keywords-common-lisp-common-2" variable (:default-value (quote ("do-debian-credits" "standard-impl-postinst" "standard-impl-postrm"))) nil [16355 16478]) ("ebuild-mode-keywords-common-lisp-common" variable (:default-value (quote ("do-debian-credits" "standard-impl-postinst" "standard-impl-postrm" "register-common-lisp-implementation" "unregister-common-lisp-implementation" "reregister-all-common-lisp-implementations"))) nil [16480 16736]) ("ebuild-mode-keywords-common-lisp" variable (:default-value (quote ("common-lisp-symlink-asdf" "common-lisp-system-symlink" "common-lisp-install"))) nil [16738 16910]) ("ebuild-mode-keywords-ruby" variable (:default-value (quote ("ruby_econf" "ruby_emake" "doruby" "ruby_einstall" "erubydoc" "erubyconf" "erubymake" "erubyinstall" "RUBY_OPTIONAL"))) nil [16912 17072]) ("ebuild-mode-keywords-check-kernel" variable (:default-value (quote ("is_2_4_kernel" "is_2_5_kernel" "is_2_6_kernel" "kernel_supports_modules"))) nil [17074 17199]) ("ebuild-mode-keywords-elisp-common" variable (:default-value (quote ("elisp-comp" "elisp-compile" "elisp-install" "elisp-site-file-install" "elisp-site-regen" "elisp-emacs-version" "elisp-make-autoload-file"))) nil [17201 17391]) ("ebuild-mode-keywords-elisp" variable (:default-value (quote ("NEED_EMACS" "DOCS"))) nil [17393 17453]) ("ebuild-mode-keywords-games-etmod" variable (:default-value (quote ("games-etmod_make_etded_exec" "games-etmod_make_enemy-territory_exec" "games-etmod_make_init.d" "games-etmod_make_conf.d"))) nil [17455 17627]) ("ebuild-mode-keywords-games-mods" variable (:default-value (quote ("default_client" "games-mods_make_ded_exec" "games-mods_make_init.d" "games-mods_make_conf.d"))) nil [17629 17772]) ("ebuild-mode-keywords-games-q3mod" variable (:default-value (quote ("games-q3mod_make_q3ded_exec" "games-q3mod_make_quake3_exec" "games-q3mod_make_init.d" "games-q3mod_make_conf.d"))) nil [17774 17937]) ("ebuild-mode-keywords-games-ut2k4mod" variable (:default-value (quote ("check_dvd"))) nil [17939 18000]) ("ebuild-mode-keywords-games" variable (:default-value (quote ("games_get_libdir" "egamesconf" "egamesinstall" "gameswrapper" "dogamesbin" "dogamessbin" "dogameslib" "dogameslib.a" "dogameslib.so" "newgamesbin" "newgamessbin" "games_make_wrapper" "gamesowners" "gamesperms" "prepgamesdirs" "gamesenv" "games_ut_unpack" "games_umod_unpack" "games_link_mods" "games_ut_unpack"))) nil [18002 18370]) ("ebuild-mode-keywords-perl-app" variable (:default-value (quote ("perl-app_src_prep"))) nil [18372 18435]) ("ebuild-mode-keywords-perl-module" variable (:default-value (quote ("perlinfo" "fixlocalpod" "updatepod"))) nil [18437 18520]) ("ebuild-mode-keywords-distutils" variable (:default-value (quote ("distutils_python_version" "distutils_python_tkinter"))) nil [18522 18620]) ("ebuild-mode-keywords-depend-apache" variable (:default-value (quote ("need_apache" "need_apache1" "need_apache2"))) nil [18622 18714]) ("ebuild-mode-keywords-apache-module" variable (:default-value (quote ("apache-module_pkg_setup" "apache-module_src_compile" "apache-module_src_install" "apache-module_pkg_postinst" "apache_cd_dir" "apache_mod_file" "apache_doc_magic"))) nil [18716 18936]) ("ebuild-mode-keywords-kernel-2" variable (:default-value (quote ("debug-print-kernel2-variables" "handle_genpatches" "detect_version" "kernel_is" "kernel_is_2_4" "kernel_is_2_6" "kernel_header_destdir" "cross_pre_c_headers" "env_setup_xmakeopts" "unpack_2_4" "unpack_2_6" "universal_unpack" "unpack_set_extraversion" "unpack_fix_install_path" "compile_headers" "compile_headers_tweak_config" "install_universal" "install_headers" "install_sources" "preinst_headers" "postinst_sources" "postinst_headers" "setup_headers" "unipatch" "getfilevar" "detect_arch" "generate_sparc_asm" "headers___fix"))) nil [18938 19539]) ("ebuild-mode-keywords-kernel-mod" variable (:default-value (quote ("kernel-mod_getmakefilevar" "kernel-mod_getversion" "kernel-mod_configoption_present" "kernel-mod_configoption_module" "kernel-mod_configoption_builtin" "kernel-mod_modules_supported" "kernel-mod_check_modules_supported" "kernel-mod_checkzlibinflate_configured" "kernel-mod_is_2_4_kernel" "kernel-mod_is_2_5_kernel" "kernel-mod_is_2_6_kernel"))) nil [19541 19949]) ("ebuild-mode-keywords-versionator" variable (:default-value (quote ("get_all_version_components" "get_version_components" "get_major_version" "get_version_component_range" "get_after_major_version" "replace_version_separator" "replace_all_version_separators" "delete_version_separator" "delete_all_version_separators" "get_version_component_count" "get_last_version_component_index" "version_is_at_least" "version_compare" "version_sort"))) nil [19951 20387]) ("font-lock-add-keywords" code nil nil [20389 25889]))
    :file "ebuild-mode-keywords.el"
    :pointmax 25994
    :unmatched-syntax 'nil
    )
   (semanticdb-table "gentoo-syntax.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("or" code nil nil [1125 1938]) ("ebuild-mode-make-keywords-list" function (:arguments ("keywords-list" "face" "&optional" "prefix" "suffix")) nil [1941 2310]) ("load" code nil nil [2312 2347]) ("load" code nil nil [2348 2384]) ("ebuild-mode-tabify" function nil nil [2386 3094]) ("ebuild-mode-hook" variable nil nil [3096 3182]) ("eselect-mode-hook" variable nil nil [3184 3272]) ("define-derived-mode" code nil nil [3289 3724]) ("define-derived-mode" code nil nil [3741 4160]) ("ebuild-commands-list" variable (:default-value (quote ("help" "setup" "fetch" "digest" "manifest" "unpack" "compile" "test" "preinst" "postinst" "install" "qmerge" "merge" "prerm" "postrm" "unmerge" "config" "package" "rpm" "clean"))) nil [4188 4407]) ("ebuild-run-command" function (:user-visible-flag t :arguments ("command")) nil [4424 5040]) ("ebuild-mode-arch-stable-list" variable (:default-value (quote ("alpha" "amd64" "arm" "hppa" "ia64" "m68k" "mips" "ppc" "ppc64" "ppc-macos" "s390" "sh" "sparc" "x86"))) nil [5142 5290]) ("ebuild-mode-arch-list" variable (:default-value (\` ((\,@ ebuild-mode-arch-stable-list) "sparc-fbsd" "x86-fbsd"))) nil [5292 5382]) ("ebuild-mode-keywords-regexp" variable (:default-value "^KEYWORDS=[\"']\\([^\"]*\\)[\"'][ 	]*$") nil [5384 5464]) ("ebuild-mode-get-keywords" function (:arguments ("&optional" "noerror")) nil [5466 5992]) ("ebuild-mode-put-keywords" function (:arguments ("kw" "&optional" "noerror")) nil [5994 6444]) ("ebuild-mode-sort-keywords" function (:arguments ("kw")) nil [6446 6625]) ("ebuild-mode-modify-keywords" function (:arguments ("kw")) nil [6627 7511]) ("ebuild-mode-keyword" function (:user-visible-flag t :arguments ("action" "arch")) nil [7513 8018]) ("ebuild-mode-ekeyword-complete" function (:arguments ("s" "predicate" "mode")) nil [8020 8765]) ("ebuild-mode-ekeyword" function (:user-visible-flag t :arguments ("keywords")) nil [8767 9198]) ("ebuild-run-echangelog" function (:arguments ("text")) nil [9226 9437]) ("define-key" code nil nil [9529 9588]) ("define-key" code nil nil [9675 9737]) ("define-key" code nil nil [9738 9798]) ("define-key" code nil nil [9799 9860]) ("and" code nil nil [9862 10089]) ("add-to-list" code nil nil [10106 10168]) ("add-to-list" code nil nil [10184 10246]) ("add-to-list" code nil nil [10262 10326]) ("add-to-list" code nil nil [10343 10405]) ("gentoo-syntax" package nil nil [10407 10431]) ("ebuild-mode" package nil nil [10432 10454]))
    :file "gentoo-syntax.el"
    :pointmax 10561
    )
   (semanticdb-table "wdired.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("advice" include nil nil [6335 6352]) ("make-symbolic-link" variable nil nil [6355 6382]) ("dired-backup-overwrite" variable nil nil [6425 6456]) ("set" code nil nil [6501 6552]) ("dired" include nil nil [6575 6591]) ("dired-do-create-files-regexp" function (:prototype-flag t) nil [6594 6646]) ("dired-call-process" function (:prototype-flag t) nil [6649 6691]) ("defgroup" code nil nil [6694 6795]) ("wdired-use-interactive-rename" variable (:user-visible-flag t) nil [6797 7165]) ("wdired-is-ok-overwrite" variable (:user-visible-flag t) nil [7167 7371]) ("wdired-always-move-to-filename-beginning" variable (:user-visible-flag t) nil [7373 7968]) ("wdired-advise-functions" variable (:user-visible-flag t :default-value t) nil [7970 8491]) ("wdired-allow-to-redirect-links" variable (:user-visible-flag t :default-value t) nil [8493 8719]) ("wdired-allow-to-change-permissions" variable (:user-visible-flag t) nil [8721 9712]) ("wdired-running-xemacs" variable (:default-value (featurep (quote xemacs))) nil [9715 9764]) ("dired" include nil nil [9766 9782]) ("if" code nil nil [9783 10195]) ("wdired-mode-map" variable nil nil [10197 10225]) ("unless" code nil nil [10226 12001]) ("wdired-mode-hooks" variable nil nil [12003 12077]) ("wdired-load-hooks" variable nil nil [12079 12150]) ("wdired-col-perm" variable nil nil [12210 12234]) ("wdired-old-content" variable nil nil [12277 12304]) ("or" code nil nil [12332 12439]) ("or" code nil nil [12441 12706]) ("wdired-mode" function (:user-visible-flag t) nil [12709 13271]) ("put" code nil nil [13272 13311]) ("wdired-change-to-wdired-mode" function (:user-visible-flag t) nil [13329 14771]) ("wdired-preprocess-files" function nil nil [14904 15631]) ("wdired-normalize-filename" function (:arguments ("file")) nil [15690 16645]) ("wdired-get-filename" function (:arguments ("&optional" "no-dir" "old")) nil [16647 17579]) ("wdired-change-to-dired-mode" function nil nil [17582 18200]) ("wdired-abort-changes" function (:user-visible-flag t) nil [18203 18469]) ("wdired-log" function (:arguments ("log" "&rest" "args")) nil [18471 18666]) ("wdired-finish-edit" function (:user-visible-flag t) nil [18668 20999]) ("wdired-search-and-rename" function (:arguments ("filename-ori" "filename-new")) nil [21148 22053]) ("wdired-flag-for-deletion" function (:arguments ("filenames-ori")) nil [22093 22329]) ("wdired-customize" function (:user-visible-flag t) nil [22331 22443]) ("wdired-revert" function (:arguments ("&optional" "arg" "noconfirm")) nil [22445 22645]) ("wdired-check-kill-buffer" function nil nil [22647 22816]) ("wdired-next-line" function (:user-visible-flag t :arguments ("arg")) nil [22818 23313]) ("wdired-previous-line" function (:user-visible-flag t :arguments ("arg")) nil [23315 23816]) ("wdired-newline" function (:user-visible-flag t) nil [23868 23925]) ("wdired-preprocess-symlinks" function nil nil [23999 24593]) ("wdired-get-previous-link" function (:arguments ("&optional" "old" "move")) nil [24596 25149]) ("wdired-do-symlink-changes" function nil nil [25212 26032]) ("wdired-xcase-word" function (:arguments ("command" "arg")) nil [26088 26361]) ("wdired-downcase-word" function (:user-visible-flag t :arguments ("arg")) nil [26363 26550]) ("wdired-upcase-word" function (:user-visible-flag t :arguments ("arg")) nil [26552 26733]) ("wdired-capitalize-word" function (:user-visible-flag t :arguments ("arg")) nil [26735 26928]) ("wdired-add-skip-in-replace" function (:arguments ("command")) nil [27423 28094]) ("wdired-add-replace-advice" function (:arguments ("command")) nil [28097 29176]) ("if" code nil nil [29179 29328]) ("wdired-perm-mode-map" variable nil nil [29424 29457]) ("unless" code nil nil [29458 30242]) ("wdired-preprocess-perms" function nil nil [30361 31263]) ("wdired-perm-allowed-in-pos" function (:arguments ("char" "pos")) nil [31265 31589]) ("wdired-set-bit" function (:user-visible-flag t) nil [31591 32206]) ("wdired-toggle-bit" function (:user-visible-flag t) nil [32208 32807]) ("wdired-mouse-toggle-bit" function (:user-visible-flag t :arguments ("event")) nil [32809 32969]) ("wdired-perms-to-number" function (:arguments ("perms")) nil [33127 34002]) ("wdired-do-perm-changes" function nil nil [34081 35335]) ("wdired" package nil nil [35337 35354]) ("run-hooks" code nil nil [35355 35384]))
    :file "wdired.el"
    :pointmax 35410
    )
   (semanticdb-table "tool-bar+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("define-minor-mode" code nil nil [3404 4734]) ("make-variable-frame-local" code nil nil [4736 4783]) ("define-key" code nil nil [4943 5263]) ("add-to-list" code nil nil [5265 5325]) ("define-minor-mode" code nil nil [5328 5935]) ("show-tool-bar-for-one-command" function (:user-visible-flag t) nil [6480 7510]) ("tool-bar+" package nil nil [7573 7593]))
    :file "tool-bar+.el"
    :pointmax 7693
    )
   (semanticdb-table "autoinfo.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("autoinfo-min-query-length" variable (:default-value 3) nil [1440 1542]) ("autoinfo-max-query-length" variable (:default-value 20) nil [1544 1647]) ("autoinfo-idle-period" variable (:default-value 3) nil [1649 1762]) ("autoinfo-fetch-info-function" variable (:default-value (quote autoinfo-fetch-gdict-translation)) nil [2237 2469]) ("autoinfo-show-result-function" variable (:default-value (quote autoinfo-show-result-in-tooltip)) nil [2471 2623]) ("autoinfo-timer" variable nil nil [2699 2762]) ("autoinfo-last-query" variable nil nil [2764 2820]) ("define-minor-mode" code nil nil [2823 2961]) ("autoinfo-toggle" function nil nil [2966 3276]) ("autoinfo-check-selection" function nil nil [3279 3830]) ("autoinfo-fetch-google-definition" function (:arguments ("query")) nil [3833 4231]) ("autoinfo-fetch-dict-translation" function (:arguments ("query")) nil [4234 4619]) ("autoinfo-fetch-gdict-translation" function (:arguments ("query")) nil [4622 5076]) ("autoinfo-handle-google-response" function (:arguments ("status")) nil [5081 5574]) ("autoinfo-handle-dict-response" function (:arguments ("status")) nil [5584 6309]) ("autoinfo-handle-gdict-response" function (:arguments ("status")) nil [6313 6917]) ("autoinfo-show-result-in-tooltip" function (:arguments ("result")) nil [6920 7041]) ("autoinfo" package nil nil [7046 7065]))
    :file "autoinfo.el"
    :pointmax 7066
    :unmatched-syntax 'nil
    )
   (semanticdb-table "vbnet-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("vbnet-mode" package nil nil [5805 5826]) ("vbnet-xemacs-p" variable (:default-value (string-match "XEmacs\\|Lucid" (emacs-version))) nil [5828 5899]) ("vbnet-winemacs-p" variable (:default-value (string-match "Win-Emacs" (emacs-version))) nil [5900 5968]) ("vbnet-win32-p" variable (:default-value (eq window-system (quote w32))) nil [5969 6015]) ("vbnet-mode-indent" variable (:user-visible-flag t :default-value 4) nil [6057 6127]) ("vbnet-fontify-p" variable (:user-visible-flag t :default-value t) nil [6128 6191]) ("vbnet-capitalize-keywords-p" variable (:user-visible-flag t :default-value t) nil [6192 6273]) ("vbnet-wild-files" variable (:user-visible-flag t :default-value "*.frm *.bas *.cls") nil [6274 6365]) ("vbnet-ide-pathname" variable (:user-visible-flag t) nil [6366 6459]) ("vbnet-allow-single-line-if" variable (:user-visible-flag t) nil [6510 6586]) ("vbnet-defn-templates" variable (:user-visible-flag t :default-value (list "Public Sub ()
End Sub

" "Public Function () As Variant
End Function

" "Public Property ()
End Property

")) nil [6589 6828]) ("vbnet-imenu-generic-expression" variable (:default-value (quote ((nil "^\\s-*\\(public\\|private\\)*\\s-+\\(declare\\s-+\\)*\\(sub\\|function\\)\\s-+\\(\\sw+\\>\\)" 4) ("Constants" "^\\s-*\\(private\\|public\\|global\\)*\\s-*\\(const\\s-+\\)\\(\\sw+\\>\\s-*=\\s-*.+\\)$\\|'" 3) ("Variables" "^\\(private\\|public\\|global\\|dim\\)+\\s-+\\(\\sw+\\>\\s-+as\\s-+\\sw+\\>\\)" 2) ("Types" "^\\(public\\s-+\\)*type\\s-+\\(\\sw+\\)" 2)))) nil [6830 7279]) ("vbnet-mode-syntax-table" variable nil nil [7283 7319]) ("if" code nil nil [7320 7763]) ("vbnet-mode-map" variable nil nil [7838 7865]) ("if" code nil nil [7866 8844]) ("vbnet-mode-abbrev-table" variable nil nil [8898 8934]) ("vbnet-mode-hook" variable nil nil [8936 8963]) ("vbnet-defun-start-regexp" variable (:constant-flag t :default-value (concat "^[ 	]*\\([Pp]ublic [Ss]hared\\|[Pp]ublic \\|[Pp]rivate \\|[Ss]tatic\\|[Ff]riend \\)?" "\\([Ss]ub\\|[Ff]unction\\|[Pp]roperty +[GgSsLl]et\\|[Tt]ype\\|[Ee]num\\|[Cc]lass\\|[Mm]odule\\)" "[ 	]+\\(\\w+\\)[ 	]*(?")) nil [9125 9401]) ("vbnet-defun-end-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ee]nd \\([Ss]ub\\|[Ff]unction\\|[Pp]roperty\\|[Tt]ype\\|[Ee]num\\|[Cc]lass\\|[Mm]odule\\)") nil [9405 9540]) ("vbnet-if-regexp" variable (:constant-flag t :default-value "^[ 	]*#?[Ii]f[ 	]+.*[ 	_]+") nil [10027 10087]) ("vbnet-ifthen-regexp" variable (:constant-flag t :default-value "^[ 	]*#?[Ii]f.+\\<[Tt]hen\\>\\s-\\S-+") nil [10089 10160]) ("vbnet-else-regexp" variable (:constant-flag t :default-value "^[ 	]*#?[Ee]lse\\([Ii]f\\)?") nil [10162 10221]) ("vbnet-endif-regexp" variable (:constant-flag t :default-value "[ 	]*#?[Ee]nd[ 	]*[Ii]f") nil [10222 10279]) ("vbnet-continuation-regexp" variable (:constant-flag t :default-value "^.*_[ 	]*$") nil [10281 10332]) ("vbnet-label-regexp" variable (:constant-flag t :default-value "^[ 	]*[a-zA-Z0-9_]+:$") nil [10353 10407]) ("vbnet-select-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ss]elect[ 	]+[Cc]ase") nil [10410 10472]) ("vbnet-case-regexp" variable (:constant-flag t :default-value "^[ 	]*[Cc]ase") nil [10473 10518]) ("vbnet-select-end-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ee]nd[ 	]+[Ss]elect") nil [10519 10584]) ("vbnet-for-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ff]or\\b") nil [10586 10632]) ("vbnet-next-regexp" variable (:constant-flag t :default-value "^[ 	]*[Nn]ext\\b") nil [10633 10681]) ("vbnet-getset-regexp" variable (:constant-flag t :default-value "^[ 	]*[GgSs]et\\b") nil [10736 10787]) ("vbnet-end-getset-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ee]nd[ 	]+[GgSs]et") nil [10788 10852]) ("vbnet-do-regexp" variable (:constant-flag t :default-value "^[ 	]*[Dd]o\\b") nil [10855 10899]) ("vbnet-loop-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ll]oop\\b") nil [10900 10948]) ("vbnet-while-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ww]hile\\b") nil [10950 11000]) ("vbnet-wend-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ww]end\\b") nil [11001 11049]) ("vbnet-with-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ww]ith\\b") nil [11051 11099]) ("vbnet-end-with-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ee]nd[ 	]+[Ww]ith\\b") nil [11100 11164]) ("vbnet-try-regexp" variable (:constant-flag t :default-value "^[ 	]*[Tr]ry\\b") nil [11166 11212]) ("vbnet-catch-regexp" variable (:constant-flag t :default-value "^[ 	]*[Cc]atch\\b") nil [11213 11263]) ("vbnet-finally-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ff]inally\\b") nil [11264 11318]) ("vbnet-end-try-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ee]nd[ 	]+[Tt]ry\\b") nil [11319 11381]) ("vbnet-class-regexp" variable (:constant-flag t :default-value "^[ 	]*[Cc]lass\\b") nil [11383 11433]) ("vbnet-end-class-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ee]nd[ 	]+[Cc]lass\\b") nil [11434 11500]) ("vbnet-module-regexp" variable (:constant-flag t :default-value "^[ 	]*[Mm]odule\\b") nil [11502 11554]) ("vbnet-end-module-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ee]nd[ 	]+[Mm]odule\\b") nil [11555 11623]) ("vbnet-using-regexp" variable (:constant-flag t :default-value "^[ 	]*[Uu]sing\\b") nil [11625 11675]) ("vbnet-end-using-regexp" variable (:constant-flag t :default-value "^[ 	]*[Ee]nd[ 	]+[Uu]sing\\b") nil [11676 11742]) ("vbnet-blank-regexp" variable (:constant-flag t :default-value "^[ 	]*$") nil [11744 11784]) ("vbnet-comment-regexp" variable (:constant-flag t :default-value "^[ 	]*\\s<.*$") nil [11785 11833]) ("vbnet-all-keywords" variable (:default-value (quote ("Add" "Aggregate" "And" "App" "AppActivate" "Application" "Array" "As" "Asc" "AscB" "Atn" "Attribute" "Beep" "Begin" "BeginTrans" "Boolean" "ByVal" "ByRef" "Catch" "CBool" "CByte" "CCur" "CDate" "CDbl" "CInt" "CLng" "CSng" "CStr" "CVErr" "CVar" "Call" "Case" "ChDir" "ChDrive" "Character" "Choose" "Chr" "ChrB" "Class" "Clipboard" "Close" "Collection" "Columns" "Command" "CommitTrans" "CompactDatabase" "Component" "Components" "Const" "Container" "Containers" "Cos" "CreateDatabase" "CreateObject" "CurDir" "Currency" "DBEngine" "DDB" "Data" "Database" "Databases" "Date" "DateAdd" "DateDiff" "DatePart" "DateSerial" "DateValue" "Day" "Debug" "Declare" "Deftype" "DeleteSetting" "Dim" "Dir" "Do" "DoEvents" "Domain" "Double" "Dynaset" "EOF" "Each" "Else" "End" "EndProperty" "Enum" "Environ" "Erase" "Err" "Error" "Exit" "Exp" "FV" "False" "Field" "Fields" "FileAttr" "FileCopy" "FileDateTime" "FileLen" "Fix" "Font" "For" "Form" "FormTemplate" "Format" "Forms" "FreeFile" "FreeLocks" "Friend" "Function" "Get" "GetAllSettings" "GetAttr" "GetObject" "GetSetting" "Global" "GoSub" "GoTo" "Group" "Groups" "Hex" "Hour" "IIf" "IMEStatus" "IPmt" "IRR" "If" "Implements" "InStr" "Input" "Int" "Integer" "Is" "IsArray" "IsDate" "IsEmpty" "IsError" "IsMissing" "IsNull" "IsNumeric" "IsObject" "Kill" "LBound" "LCase" "LOF" "LSet" "LTrim" "Left" "Len" "Let" "Like" "Line" "Load" "LoadPicture" "LoadResData" "LoadResPicture" "LoadResString" "Loc" "Lock" "Log" "Long" "Loop" "MDIForm" "MIRR" "Me" "MenuItems" "MenuLine" "Mid" "Minute" "MkDir" "Month" "MsgBox" "NPV" "NPer" "Name" "New" "Next" "Not" "Now" "Nothing" "Object" "Oct" "On" "Open" "OpenDatabase" "Operator" "Option" "Optional" "Or" "PPmt" "PV" "Parameter" "Parameters" "Partition" "Picture" "Pmt" "Print" "Printer" "Printers" "Private" "ProjectTemplate" "Property" "Properties" "Public" "Put" "QBColor" "QueryDef" "QueryDefs" "RSet" "RTrim" "Randomize" "Rate" "ReDim" "Recordset" "Recordsets" "RegisterDatabase" "Relation" "Relations" "Rem" "RepairDatabase" "Reset" "Resume" "Return" "Right" "RmDir" "Rnd" "Rollback" "RowBuffer" "SLN" "SYD" "SavePicture" "SaveSetting" "Screen" "Second" "Seek" "SelBookmarks" "Select" "SelectedComponents" "SendKeys" "Set" "SetAttr" "SetDataAccessOption" "SetDefaultWorkspace" "Sgn" "Shell" "Sin" "Single" "Snapshot" "Space" "Spc" "Sqr" "Static" "Step" "Stop" "Str" "StrComp" "StrConv" "String" "Sub" "SubMenu" "Switch" "Tab" "Table" "TableDef" "TableDefs" "Tan" "Then" "Time" "TimeSerial" "TimeValue" "Timer" "To" "Trim" "True" "Try" "Type" "TypeName" "UBound" "UCase" "Unload" "Unlock" "Using" "Val" "Variant" "VarType" "Verb" "Weekday" "Wend" "While" "Width" "With" "Workspace" "Workspaces" "Write" "Year" "NotInheritable" "Shared" "OrElse" "Overridable" "WithEvents" "Finally" "Imports" "Compare" "Handles" "Of" "Module"))) nil [11932 15073]) ("vbnet-font-lock-keywords-1" variable (:default-value (eval-when-compile (list (list vbnet-defun-start-regexp (quote (1 font-lock-keyword-face nil t)) (quote (2 font-lock-keyword-face nil t)) (quote (3 font-lock-function-name-face))) (cons vbnet-label-regexp (quote font-lock-keyword-face)) (list "^[ 	]*case[ 	]+\\([^'
]+\\)" 1 (quote font-lock-keyword-face) t) (list (concat "\\<" (regexp-opt (quote ("Dim" "If" "Then" "Else" "ElseIf" "End If")) t) "\\>") 1 (quote font-lock-keyword-face))))) nil [15076 15793]) ("vbnet-font-lock-keywords-2" variable (:default-value (append vbnet-font-lock-keywords-1 (eval-when-compile (\` (((\, (concat "\\<" (regexp-opt vbnet-all-keywords t) "\\>")) 1 font-lock-keyword-face)))))) nil [15795 16004]) ("vbnet-font-lock-keywords" variable (:default-value vbnet-font-lock-keywords-1) nil [16006 16066]) ("put" code nil nil [16069 16132]) ("vbnet-mode" function (:user-visible-flag t) nil [16134 17759]) ("vbnet-enable-font-lock" function nil nil [17762 18754]) ("vbnet-construct-keyword-abbrev-table" function nil nil [19137 19509]) ("vbnet-construct-keyword-abbrev-table" code nil nil [19553 19591]) ("vbnet-in-code-context-p" function nil nil [19594 20076]) ("vbnet-pre-abbrev-expand-hook" function nil nil [20101 20290]) ("vbnet-newline-and-indent" function (:user-visible-flag t :arguments ("&optional" "count")) nil [20293 20507]) ("vbnet-beginning-of-defun" function nil nil [20509 20608]) ("vbnet-end-of-defun" function nil nil [20610 20700]) ("vbnet-mark-defun" function nil nil [20702 20892]) ("vbnet-indent-defun" function nil nil [20894 21027]) ("vbnet-fill-long-comment" function (:user-visible-flag t) nil [21030 22049]) ("vbnet-fill-or-indent" function (:user-visible-flag t) nil [22052 22356]) ("vbnet-new-sub" function (:user-visible-flag t) nil [22359 22918]) ("vbnet-untabify" function nil nil [22921 23069]) ("vbnet-default-tag" function nil nil [23071 23365]) ("vbnet-grep" function (:user-visible-flag t :arguments ("tag")) nil [23367 23697]) ("vbnet-buffer-project-file" function nil nil [23721 23913]) ("vbnet-start-ide" function (:user-visible-flag t) nil [23915 24804]) ("vbnet-indent-region" function (:user-visible-flag t :arguments ("start" "end")) nil [24840 25329]) ("vbnet-previous-line-of-code" function nil nil [25333 25615]) ("vbnet-find-original-statement" function nil nil [25618 25961]) ("vbnet-find-matching-stmt" function (:arguments ("open-regexp" "close-regexp")) nil [25963 26341]) ("vbnet-find-matching-if" function nil nil [26343 26447]) ("vbnet-find-matching-defun" function nil nil [26449 26569]) ("vbnet-find-matching-select" function nil nil [26572 26689]) ("vbnet-find-matching-for" function nil nil [26691 26796]) ("vbnet-find-matching-do" function nil nil [26798 26901]) ("vbnet-find-matching-while" function nil nil [26903 27012]) ("vbnet-find-matching-try" function nil nil [27014 27122]) ("vbnet-find-matching-class" function nil nil [27124 27238]) ("vbnet-find-matching-using" function nil nil [27240 27354]) ("vbnet-find-matching-with" function nil nil [27356 27467]) ("vbnet-find-matching-getset" function nil nil [27469 27586]) ("vbnet-calculate-indent" function nil nil [28221 34144]) ("vbnet-indent-to-column" function (:arguments ("col")) nil [34146 34880]) ("vbnet-indent-line" function (:user-visible-flag t) nil [34883 35014]) ("vbnet-split-line" function (:user-visible-flag t) nil [35017 35850]) ("vbnet-mode" package nil nil [35852 35873]) ("vbnet-load-associated-files" function nil nil [35976 36779]) ("vbnet-load-file-ifnotloaded" function (:arguments ("file" "default-directory")) nil [36783 37154]))
    :file "vbnet-mode.el"
    :pointmax 37186
    )
   (semanticdb-table "php-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "php-mode.el"
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
